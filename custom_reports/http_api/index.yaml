swagger: '2.0'
info:
  title: Analytics HTTP API
  description: |
    **Authentication is required** to access any of the
    following endpoints. Please see [Authorization](../../platform/getting_started.html)
    documentation for more details.

    Available columns and transformations are listed in the
    [Columns](../columns.html) documentation.
  version: 'auto'
host: your-instance-name.piwik.pro
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/analytics/v1/query/:
    post:
      tags:
        - Queries
      summary:
        Execute query
      description: |
        API that allows querying the database directly. Please note that each
        request must be authenticated.

        #### Copy definition

        You can use the **View API call definition** option
        available in Analytics module in each report to get more
        usage examples based on your existing reports.

        ![View API call definition](../../_static/images/copy-api-call.png)


        #### Compression

        When requesting large amount of data, make sure to include
        an **Accept-Encoding: gzip** header to enable
        compression.


        #### Cache

        Please note that all query results are cached for 10 minutes.

      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/QueryRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                description: Rows with results for the query.
                items:
                  type: object
              meta:
                type: object
                description: Additional results metadata for the query.
                properties:
                  count:
                    type: integer
                    description: Total number of results available for this query.
            example: { "data": [ [ [ "EU", "Europe" ], "Blink", 529437, 128334 ], [ [ "NA", "North America" ], "Blink", 199355, 47171 ], [ [ "AS", "Asia" ], "Blink", 153385, 37308 ] ], "meta": { "count": 42 } }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
                    source:
                      type: object
                      description: Source of the error (if available).
                      properties:
                        parameter:
                          type: string
                          description: Path to the parameter that caused the error.
            example: { "errors": [ { "status": "400", "detail": "Dimension \"example\" does not exist.", "source": { "parameter": "columns.column_id" } } ] }
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "401", "detail": "No valid credentials provided." } ] }
        403:
          description: Forbidden
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "403", "detail": "No valid license found." } ] }

  /api/analytics/v1/sessions/:
    post:
      tags:
        - Raw data
      summary:
        Fetch sessions
      description: |
        API that allows fetching raw sessions from the database (event-level data
        is not available in this API). Please note that each request must be
        authenticated.

        #### Compression

        When requesting large amount of data, make sure to include
        an **Accept-Encoding: gzip** header to enable
        compression.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RawDataRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                description: Rows with results for the query.
                items:
                  type: object
              meta:
                type: object
                description: Additional results metadata for the query.
                properties:
                  columns:
                    type: array
                    description: List of column IDs returned.
                    items:
                      type: string
                  count:
                    type: integer
                    description: Total number of results available for this query.
            example: { "data": [ [ "2132601","2ecf33167d400648","2018-12-03T00:21:03","375x667",[ 1,"Smartphone" ] ] ],"meta": { "columns": [ "session_id","visitor_id","timestamp","resolution","device_type" ],"count": 1999 } }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
                    source:
                      type: object
                      description: Source of the error (if available).
                      properties:
                        parameter:
                          type: string
                          description: Path to the parameter that caused the error.
            example: { "errors": [ { "status": "400", "detail": "Dimension \"example\" does not exist.", "source": { "parameter": "columns.column_id" } } ] }
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "401", "detail": "No valid credentials provided." } ] }
        403:
          description: Forbidden
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "403", "detail": "No valid license found." } ] }

  /api/analytics/v1/events/:
    post:
      tags:
        - Raw data
      summary:
        Fetch events
      description: |
        API that allows fetching raw events from the database. Please note that
        each request must be authenticated.

        #### Compression

        When requesting large amount of data, make sure to include
        an **Accept-Encoding: gzip** header to enable
        compression.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RawDataRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                description: Rows with results for the query.
                items:
                  type: object
              meta:
                type: object
                description: Additional results metadata for the query.
                properties:
                  columns:
                    type: array
                    description: List of column IDs returned.
                    items:
                      type: string
                  count:
                    type: integer
                    description: Total number of results available for this query.
            example: { "data": [ [ "2132601","8131637","2ecf33167d400648","2018-12-03T00:21:03","375x667",[ 1,"Smartphone" ] ] ],"meta": { "columns": [ "session_id","event_id","visitor_id","timestamp","resolution","device_type" ],"count": 3448 } }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
                    source:
                      type: object
                      description: Source of the error (if available).
                      properties:
                        parameter:
                          type: string
                          description: Path to the parameter that caused the error.
            example: { "errors": [ { "status": "400", "detail": "Dimension \"example\" does not exist.", "source": { "parameter": "columns.column_id" } } ] }
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "401", "detail": "No valid credentials provided." } ] }
        403:
          description: Forbidden
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: HTTP status code for the error.
                    detail:
                      type: string
                      description: Additional information about the error.
            example: { "errors": [ { "status": "403", "detail": "No valid license found." } ] }

definitions:
  QueryRequest:
    type: object
    properties:
      website_id:
        type: string
        format: uuid
        description: ID of a website or a meta site.
        example: 70236925-724f-404e-b634-7b5633bc0bcc
      columns:
        type: array
        description: Column definitions for the query.
        items:
          type: object
          properties:
            column_id:
              type: string
              description: ID of the column (either a dimension or a metric).
            transformation_id:
              type: string
              description: |
                Optional ID of the transformation. Must be supported by the
                column that was specified.
            goal_id:
              type: integer
              description: |
                Optional ID of a goal. Available only for metrics related to goals.
          required:
            - column_id
        example: [ { "column_id": "device_type" },{ "column_id": "revenue","transformation_id": "sum" } ]
      date_from:
        type: string
        format: date
        description: Start date for the query (inclusive). Cannot be used with relative_date field at
          the same time. Mandatory if ``relative_date`` is not used.
      date_to:
        type: string
        format: date
        description: End date for the query (inclusive). Cannot be used with ``relative_date`` field at
          the same time. Mandatory if ``relative_date`` is not used.
      relative_date:
        type: string
        enum:
          - today
          - yesterday
          - last_week
          - last_month
          - last_year
          - last_X_days
        description: |
          Use relative date in query. Cannot be used with absolute date fields at
          the same time. ``X`` in ``last_X_days`` must be in range 1 <= ``X`` <= 365.
          Note that ``last_X_days`` does not include data from today.
          Mandatory if absolute date fields are not used.
      filters:
        type: object
        description: |
          Dimension filters for the query.  The top-level object must specify
          AND/OR clause, but any nested objects may either specify another AND/OR
          clause or a single filter.
        properties:
          operator:
            type: string
            description: Logical operator (AND/OR) for the clause.
            enum:
              - and
              - or
          conditions:
            type: array
            description: List of filters or recursively nested clauses.
            items:
              type: object
              required:
                - column_id
                - condition
              properties:
                column_id:
                  type: string
                  description: ID of the column (must be a dimension).
                transformation_id:
                  type: string
                  description: |
                    Optional ID of the transformation. Must be supported by
                    the column that was specified and must convert the column
                    into another dimension (and not a metric).
                condition:
                  type: object
                  description: Definition of a the condition for this column.
                  properties:
                    operator:
                      type: string
                      description: |
                        Filtering operator. Available choices depend on
                        the specified column's type.

                        String operators: ``eq``, ``neq``,
                        ``contains``, ``not_contains``,
                        ``icontains``, ``not_icontains``,
                        ``starts_with``, ``ends_with``,
                        ``matches``, ``not_matches``. For regular expressions (operators: ``matches`` and ``not_matches``)
                        use [re2](https://github.com/google/re2/wiki/Syntax) syntax.

                        Numeric operators: ``eq``, ``neq``, ``gt``, ``gte``,
                        ``lt``, ``lte``.

                        Boolean operators: ``eq``, ``neq``.

                        Enum operators: ``eq``, ``neq``, ``empty``, ``not_empty``.
                    value:
                      description: |
                        Value that should be matched by filter. Value type must
                        match the type of the specified column. For enumerated
                        fields, you must use the ID value.
                  required:
                    - operator
                    - value
              example: { "column_id": "event_title","condition": { "operator": "contains","value": "test" } }
        required:
          - operator
          - conditions
      metric_filters:
        type: object
        description: |
          Metric filters for the query. The top-level object must specify AND/OR
          clause, but any nested objects may either specify another AND/OR
          clause or a single filter.
        properties:
          operator:
            type: string
            description: Logical operator (AND/OR) for the clause.
            enum:
              - and
              - or
          conditions:
            type: array
            description: List of filters or recursively nested clauses.
            items:
              type: object
              required:
                - column_id
                - condition
              properties:
                column_id:
                  type: string
                  description: |
                    ID of the column (must be a metric, or a dimension converted
                    to a metric).
                transformation_id:
                  type: string
                  description: |
                    Optional ID of the transformation. Must be supported by
                    the column that was specified and must convert the column
                    into a metric.
                goal_id:
                  type: integer
                  description: |
                    Specify a goal ID to calculate the metric using data limited
                    to that goal only. Supported only by goal-related metrics.
                condition:
                  type: object
                  description: Definition of a the condition for this column.
                  properties:
                    operator:
                      type: string
                      description: Filtering operator.
                      enum:
                        - eq
                        - neq
                        - gt
                        - gte
                        - lt
                        - lte
                    value:
                      description: Value that should be matched by filter.
                      type: number
                      format: float
                      example: 42.5
                  required:
                    - operator
                    - value
              example: { "column_id": "page_views","condition": { "operator": "eq","value": 42 } }
        required:
          - operator
          - conditions
      offset:
        type: integer
        default: 0
        minimum: 0
        description: Number of rows to skip before beginning to return rows.
      limit:
        type: integer
        default: 100
        minimum: 1
        maximum: 100000
        description: Number of rows to return.
      order_by:
        type: array
        description: |
          Array of sorting directives. Each directive is a 2-element array with
          0-based colum index and direction). You can sort on more than one column.
          By default sorts descending by the first metric in query.
        items:
          type: array
          items:
            minItems: 2
            maxItems: 2
        example: [ [ 1, "desc" ], [ 2, "asc" ] ]
      format:
        type: string
        enum:
          - json
          - json-kv
          - csv
          - xml
        default: json
        description: |
          Data format of a successful response (error responses are always in json).
      column_format:
        type: string
        enum:
          - id
          - name
        default: id
        description: |
          Format of the columns header (in CSV responses) and metadata labels
          (in JSON responses). By default uses identifiers (``id`` option), set to
          ``name`` to use human-readable names.
      options:
        type: object
        description: |
          Additional options for query.
        properties:
          sampling:
            type: number
            format: float
            description: |
              Apply sampling for query with given data percent. Sampling 0.1 means
              only 10% of data are used to calculate query results. Sampling 1
              means that 100% of data is used to calculate results. Leave empty to
              apply default sampling value for this website. By default this means
              that sampling is turned off.
            example: 0.2
            minimum: 0.01
            maximum: 1
    required:
      - website_id
      - columns
    example:
      website_id: 70236925-724f-404e-b634-7b5633bc0bcc
      columns:
        - column_id: device_type
        - column_id: revenue
          transformation_id: sum
      date_from: '2020-02-10'
      date_to: '2020-02-10'
      filters:
        operator: and
        conditions:
          - column_id: event_title
            condition:
              operator: contains
              value: test
      metric_filters:
        operator: and
        conditions:
          - column_id: page_views
            condition:
              operator: eq
              value: 42
      offset: 0
      limit: 100
      order_by:
        - - 1
          - desc
        - - 2
          - asc
      format: json
      options:
        sampling: 0.2

  RawDataRequest:
    properties:
      website_id:
        type: string
        format: uuid
        description: ID of a website or a meta site.
        example: 70236925-724f-404e-b634-7b5633bc0bcc
      columns:
        type: array
        description: |
          Definitions of additional columns that should be returned (timestamp and
          identifiers will be returned by default).
        items:
          type: object
          properties:
            column_id:
              type: string
              description: ID of the dimension column.
            transformation_id:
              type: string
              description: |
                Optional ID of the transformation. Must be supported by
                the column that was specified and must convert the column
                into another dimension (and not a metric).
          required:
            - column_id
        example: [ { "column_id": "resolution" },{ "column_id": "device_type" } ]
      date_from:
        type: string
        format: date
        description: Start date for the query (inclusive). Cannot be used with relative_date field at
          the same time. Mandatory if ``relative_date`` is not used.
      date_to:
        type: string
        format: date
        description: End date for the query (inclusive). Cannot be used with ``relative_date`` field at
          the same time. Mandatory if ``relative_date`` is not used.
      relative_date:
        type: string
        enum:
          - today
          - yesterday
          - last_week
          - last_month
          - last_year
          - last_X_days
        description: |
          Use relative date in query. Cannot be used with absolute date fields at
          the same time. ``X`` in ``last_X_days`` must be in range 1 <= ``X`` <= 365.
          Note that ``last_X_days`` does not include data from today.
          Mandatory if absolute date fields are not used.
      filters:
        type: object
        description: |
          Dimension filters for the query. The top-level object must specify
          AND/OR clause, but any nested objects may either specify another AND/OR
          clause or a single filter.
        properties:
          operator:
            type: string
            description: Logical operator (AND/OR) for the clause.
            enum:
              - and
              - or
          conditions:
            type: array
            description: List of filters or recursively nested clauses.
            items:
              type: object
              required:
                - column_id
                - condition
              properties:
                column_id:
                  type: string
                  description: ID of the dimension column.
                transformation_id:
                  type: string
                  description: |
                    Optional ID of the transformation. Must be supported by
                    the column that was specified and must convert the column
                    into another dimension (and not a metric).
                condition:
                  type: object
                  description: Definition of a the condition for this column.
                  properties:
                    operator:
                      type: string
                      description: |
                        Filtering operator. Available choices depend on
                        the specified column's type.

                        String operators: ``eq``, ``neq``,
                        ``starts_with``, ``ends_with``.
                        ``starts_with``, ``ends_with``,
                        ``matches``, ``not_matches``. For regular expressions (operators: ``matches`` and ``not_matches``)
                        use [re2](https://github.com/google/re2/wiki/Syntax) syntax.

                        Numeric operators: ``eq``, ``neq``, ``gt``, ``gte``,
                        ``lt``, ``lte``.

                        Boolean operators: ``eq``, ``neq``.

                        Enum operators: ``eq``, ``neq``, ``empty``, ``not_empty``.
                    value:
                      description: |
                        Value that should be matched by filter. Value type must
                        match the type of the specified column. For enumerated
                        fields, you must use the ID value.
                  required:
                    - operator
                    - value
              example: { "column_id": "browser_name","condition": { "operator": "eq","value": "FF" } }
        required:
          - operator
          - conditions
      offset:
        type: integer
        default: 0
        minimum: 0
        description: Number of rows to skip before beginning to return rows.
      limit:
        type: integer
        default: 100
        minimum: 1
        maximum: 100000
        description: Number of rows to return.
      format:
        type: string
        enum:
          - json
          - json-kv
          - csv
        default: json
        description: |
          Data format of a successful response (error responses are always in json).
      column_format:
        type: string
        enum:
          - id
          - name
        default: id
        description: |
          Format of the columns header (in CSV responses) and metadata labels
          (in JSON responses). By default uses identifiers (``id`` option), set to
          ``name`` to use human-readable names.
    required:
      - website_id
      - columns
    example:
      website_id: 70236925-724f-404e-b634-7b5633bc0bcc
      columns:
        - column_id: resolution
        - column_id: device_type
      date_from: '2020-02-10'
      date_to: '2020-02-10'
      filters:
        operator: and
        conditions:
          - column_id: browser_name
            condition:
              operator: eq
              value: FF
      offset: 0
      limit: 100
      format: json


