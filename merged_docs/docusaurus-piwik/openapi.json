{
  "openapi": "3.0.3",
  "info": {
    "title": "Access Control Api",
    "version": "auto",
    "description": "This api allows manipulating user and user group permissions for apps and meta sites.\n\n# Permission overview\n**Permission** is a group of specific **actions** that user can perform on entities.\n\n**App permissions**:\n\n\n| ↓ Action  \\  Permission → | view | edit | edit-publish | manage |\n|---------------------------|:----:|:----:|:------------:|:------:|\n| view                      | ✔    | ✔    | ✔            | ✔      |\n| edit                      |      | ✔    | ✔            | ✔      |\n| publish                   |      |      | ✔            | ✔      |\n| manage                    |      |      |              | ✔      |\n\n\nDetailed description of app actions:\n\n- view - allows viewing an app\n- edit - allows editing an app\n- publish - allows publishing changes in Tag Manager module\n- manage - allows managing user permissions for an app\n- add - allows adding apps (owner only)\n- delete - allows deleting an app (owner only)\n\n**Meta site permissions**:\n\n| ↓ Action  \\  Permission → | view | edit | manage |\n|---------------------------|:----:|:----:|:------:|\n| view                      | ✔    | ✔    | ✔      |\n| edit                      |      | ✔    | ✔      |\n| view_details              |      |      | ✔      |\n| edit_details              |      |      | ✔      |\n| list_apps_in_meta_site    |      |      | ✔      |\n| manage                    |      |      | ✔      |\n\n\nDetailed description of meta site actions:\n\n- view - allows viewing meta site in Analytics module\n- edit - allows editing meta site reports in Analytics module\n- view_details - allows viewing meta site details in Administration module\n- edit_details - allows editing meta site details in Administration module\n- list_apps_in_meta_site - allows listing apps in a meta site\n- manage - allows managing user permissions for a meta site\n- add - allows creating new meta site (owner only)\n- delete - allows deleting meta site (owner only)\n- add_app_to_meta_site - allows adding apps to a meta site (owner only)\n- remove_app_from_meta_site - allows removing apps from a meta site (owner only)\n"
  },
  "servers": [
    {
      "url": "https://example.piwik.pro"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/access-control/v2/entry/{entity_id}": {
      "get": {
        "summary": "Entity actions",
        "description": "Returns granted actions to a given entity for current user.",
        "operationId": "get_entity_actions_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/EntityId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityActionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/entry/ppms/app/action/{action}": {
      "get": {
        "summary": "Apps with granted action",
        "description": "Returns apps with granted action for current user.",
        "operationId": "get_apps_with_action_v2",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "Action of the app",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "view",
                "edit",
                "publish",
                "delete",
                "add",
                "manage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsWithGrantedAction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/entry/ppms/meta-site/action/{action}": {
      "get": {
        "summary": "Meta sites with granted action",
        "description": "Returns meta sites with granted action for current user.",
        "operationId": "get_meta_sites_with_action_v2",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "Action of the meta site",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "view",
                "edit",
                "view_details",
                "edit_details",
                "list_apps_in_meta_site",
                "manage",
                "add",
                "delete",
                "add_app_to_meta_site",
                "remove_app_from_meta_site"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaSitesWithGrantedAction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/entry/ppms/user/action/{action}": {
      "get": {
        "summary": "Users with granted action",
        "description": "Returns users with granted action for current user.",
        "operationId": "get_users_with_action_v2",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "Action of the user",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "view",
                "edit",
                "delete",
                "list",
                "add",
                "demote_app_manager",
                "demote_meta_site_manager"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersWithGrantedAction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/global/actions": {
      "get": {
        "summary": "Global actions",
        "description": "It gets actions without specific entity context for a given user.",
        "operationId": "get_global_actions_v2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalActions"
                }
              }
            }
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/app/{app_id}/permission/user": {
      "get": {
        "summary": "Users permissions for a given app",
        "description": "Lists all users (but not owners) and their permissions for a given app.\nList contains both explicit permission of a user and implicit highest permission inherited from user groups which user belongs to.\n",
        "operationId": "list_app_permissions_for_user_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/AppId"
          },
          {
            "$ref": "#/components/parameters/UserSearch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserPermissionsForApp"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/app/{app_id}/permission/user-group": {
      "get": {
        "summary": "User groups permissions for a given app",
        "description": "Lists all user groups and their permissions for a given app.",
        "operationId": "list_app_permissions_for_user_group_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppId"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/UserGroupsSearch"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name"
              ],
              "default": "name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupPermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/meta-site/{meta_site_id}/permission/user": {
      "get": {
        "summary": "Users permissions for a given meta site",
        "description": "Lists all users (but not owners) and their permissions for a given meta site.\nList contains both explicit permission of a user and implicit highest permission inherited from user groups which user belongs to.\n",
        "operationId": "list_meta_site_permissions_for_user_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/UserSearch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserPermissionsForMetaSite"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/meta-site/{meta_site_id}/permission/user-group": {
      "get": {
        "summary": "User groups permissions for a given meta site",
        "description": "Lists all user groups and their permission for a given meta site.",
        "operationId": "list_meta_site_permissions_for_user_group_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/UserGroupSearch"
          },
          {
            "$ref": "#/components/parameters/UserGroupSort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupPermissionsForMetaSite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/app/{app_id}/permission/user/{user_id}": {
      "post": {
        "summary": "Set user permission for a given app",
        "description": "Sets user permission for a given app",
        "operationId": "set_app_permission_for_user_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppId"
          },
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AppPermissionForUserSet"
                  }
                ]
              }
            }
          },
          "description": "Request data to set permission for an app for a user",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/SetAppPermissionBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/app/{app_id}/permission/user-group/{user_group_id}": {
      "post": {
        "summary": "Set user group permission for a given app",
        "description": "It sets permission for a given app for a user group",
        "operationId": "set_app_permission_for_user_group_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppId"
          },
          {
            "$ref": "#/components/parameters/UserGroupId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AppPermissionForUserGroupSet"
                  }
                ]
              }
            }
          },
          "description": "Request data to set permission for an app for a user group",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/SetAppPermissionBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/meta-site/{meta_site_id}/permission/user/{user_id}": {
      "post": {
        "summary": "Set user permission for a given meta site",
        "description": "It sets permission for a given meta site for a user",
        "operationId": "set_meta_site_permission_for_user_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetaSitePermissionForUserSet"
                  }
                ]
              }
            }
          },
          "description": "Request data to set permission for a meta site for a user",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/SetMetaSitePermissionBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/meta-site/{meta_site_id}/permission/user-group/{user_group_id}": {
      "post": {
        "summary": "Set user group permission for a given meta site",
        "description": "It sets permission for a given meta site for a user group",
        "operationId": "set_meta_site_permission_for_user_group_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/UserGroupId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetaSitePermissionForUserGroupSet"
                  }
                ]
              }
            }
          },
          "description": "Request data to set permission for a meta site for a user group",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/SetMetaSitePermissionBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/entry/group": {
      "post": {
        "summary": "Permission set",
        "deprecated": true,
        "description": "Please use <a href=\"#operation/set_app_permission_for_user_v2\">Set user permission for a given app</a> instead. It sets permission for a given entity (ppms/user or ppms/app).\n",
        "operationId": "_legacy_set_permission_group_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/PermissionSet"
                  }
                }
              }
            }
          },
          "description": "set permission",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/access-control/v2/entry/groups/ppms/app/{entity_id}": {
      "get": {
        "summary": "Permissions",
        "deprecated": true,
        "description": "Please use <a href=\"#operation/list_app_permissions_for_user_v2\">Users permissions for a given app</a> instead. Lists all users (but not owners) and their permissions for a given app. List contains both explicit permission of a user and implicit highest permission inherited from user groups which user belongs to.\n",
        "operationId": "_legacy_get_permission_groups_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitListAppPermissions"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/EntityId"
          },
          {
            "$ref": "#/components/parameters/UserSearch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeprecatedUserPermissionsForApp"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Access Control"
        ]
      }
    },
    "/api/apps/v2": {
      "get": {
        "summary": "Apps list",
        "description": "Get list of apps\nFull example:\n```\n/api/apps/v2?offset=100&limit=10&sort=name&search=nifty+marketing\n```\nthis will list 10 apps ordered ascending by `name` starting on 101th matching search query \"nifty marketing\".\n",
        "operationId": "api_app_list_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/App_List_JsonApi"
                }
              }
            }
          }
        },
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "App add",
        "description": "It adds app",
        "operationId": "api_app_add_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/App_NewApp_JsonApi"
              }
            }
          },
          "description": "Data describing app",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/App_JsonApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "../users/public_v2.yaml#/components/schemas/ErrorObject"
                    }
                  ]
                },
                "examples": {
                  "Too long app name": {
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "title": "Invalid form",
                          "detail": "This value is too long. It should have 90 characters or less.",
                          "code": "error.default",
                          "source": {
                            "pointer": "/name"
                          }
                        }
                      ]
                    }
                  },
                  "Add demo app forbidden": {
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "title": "Invalid form",
                          "detail": "AppType \"demo\" is not supported (supported are sharepoint, web)",
                          "code": "error.default",
                          "source": {
                            "pointer": "/appType"
                          }
                        }
                      ]
                    }
                  },
                  "App id already exists": {
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "title": "App with id: \"985ed9d7-b652-47b8-b9cf-c17d62735261\" already exists",
                          "code": "error.default"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "status",
                          "title"
                        ],
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "the HTTP status code applicable to this problem, expressed as a string value",
                            "example": "409"
                          },
                          "code": {
                            "type": "string",
                            "description": "an application-specific error code, expressed as a string value",
                            "example": "apps.error.apps-limit-reached"
                          },
                          "title": {
                            "type": "string",
                            "description": "a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization\n",
                            "example": "Limit of apps has been reached"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/apps/v2/{app_id}": {
      "get": {
        "summary": "App details",
        "description": "It gets app details",
        "operationId": "api_apps_details_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/App_JsonApi"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "App delete",
        "description": "It deletes app with given ID",
        "operationId": "api_app_delete_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Apps"
        ]
      },
      "patch": {
        "summary": "App edit",
        "description": "It edits app",
        "operationId": "api_app_edit_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/EditApp_JsonApi"
              }
            }
          },
          "description": "Data describing app",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/apps/v2/{app_id}/permissions": {
      "get": {
        "deprecated": true,
        "summary": "App permissions",
        "description": "Get app permissions",
        "operationId": "api_apps_permissions_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/permissions_limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/App_Permissions_JsonApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/apps/v2/user-group/{user_group_id}/permissions": {
      "get": {
        "summary": "Apps permission for user group",
        "description": "Get apps permission for user group",
        "operationId": "api_apps_user_group_permissions_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroup_Id"
          },
          {
            "$ref": "#/components/parameters/UserGroup_AppPermissionsSearch"
          },
          {
            "$ref": "#/components/parameters/UserGroup_AppPermissionsSort"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/App_User_Group_Permissions_JsonApi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Apps"
        ]
      }
    },
    "/api/audit-log/v1/entries": {
      "get": {
        "summary": "Entry list",
        "description": "List of Audit Log entries To specify filters use `?filter[name]=value` syntax (e.g. `?filter[type]=app.added,app.edited`) To return csv instead of json, use `Accept: text/csv` header\n",
        "operationId": "audit_log_entries_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit1"
          },
          {
            "$ref": "#/components/parameters/Offset1"
          },
          {
            "$ref": "#/components/parameters/EntriesFilter"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "meta"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              },
              "text/csv": {
                "example": "author_email,author_id,created_at,id,ip,payload,subject_id,type,version\njohn@company.com,378871f1-ec3e-11ea-b4d9-0242ac150002,2020-03-19T21:49:36Z,06768bbe-ec3f-11ea-9ba2-0242ac150002,68.242.57.125,\"{\"\"id\"\": \"\"06768bbe-ec3f-11ea-9ba2-0242ac150002\"\", \"\"urls\"\": [\"\"http://piwik.pro\"\"]}\",06768b77-ec3f-11ea-9ba2-0242ac150002,app.changed.urls,1\njane@company.com,06164bd6-ec3f-11ea-9ba2-0242ac150002,2019-10-28T13:15:26Z,067589fd-ec3f-11ea-9ba2-0242ac150002,65.60.114.193,\"{\"\"id\"\": \"\"06768bbe-ec3f-11ea-9ba2-0242ac150002\"\"}\",067589b0-ec3f-11ea-9ba2-0242ac150002,app.changed.exclude_unknown_urls,1\njohn@company.com,378871f1-ec3e-11ea-b4d9-0242ac150002,2020-01-18T10:04:48Z,39018459-ec3e-11ea-b4d9-0242ac150002,92.128.231.122,\"{\"\"id\"\": \"\"06768bbe-ec3f-11ea-9ba2-0242ac150002\"\"}\",3901832e-ec3e-11ea-b4d9-0242ac150002,app.deleted,1\njohn@company.com,378871f1-ec3e-11ea-b4d9-0242ac150002,2019-12-15T04:31:24Z,3900b710-ec3e-11ea-b4d9-0242ac150002,15.23.2.241,\"{\"\"id\"\": \"\"0fa3fd75-b1b2-4897-8853-708211cebf0a\"\"}\",3900b5d3-ec3e-11ea-b4d9-0242ac150002,permission.user_group.changed.meta_site,1\n",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryProperties"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ListBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError1"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        },
        "tags": [
          "AuditLog"
        ]
      }
    },
    "/api/container-settings/v1/app/{app_id}/settings": {
      "parameters": [
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "Get App's container settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "schema/response/app_container_settings_list_response_schema.json"
                },
                "example": {
                  "$ref": "example/app_container_settings_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      },
      "patch": {
        "summary": "Modify App's container settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "schema/request/app_container_settings_edit_request_schema.json"
              },
              "example": {
                "$ref": "example/app_container_settings_edit_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      }
    },
    "/api/container-settings/v1/app/{app_id}/settings/{setting_name}": {
      "parameters": [
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/setting_name"
        }
      ],
      "get": {
        "summary": "Get the App's container setting",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "schema/response/app_container_setting_response_schema.json"
                },
                "example": {
                  "$ref": "example/app_container_setting_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      },
      "delete": {
        "summary": "Remove the App's container setting",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      },
      "put": {
        "summary": "Modify App's container setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "schema/request/app_container_setting_edit_request_schema.json"
              },
              "example": {
                "$ref": "example/app_container_setting_edit_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      }
    },
    "/api/container-settings/v1/organization/{organization}/settings": {
      "parameters": [
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/organization"
        }
      ],
      "get": {
        "summary": "Get list of organization's container settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "schema/response/organization_container_settings_list_response_schema.json"
                },
                "example": {
                  "$ref": "example/organization_container_settings_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      },
      "patch": {
        "summary": "Modify Organization's container settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "schema/request/organization_container_settings_edit_request_schema.json"
              },
              "example": {
                "$ref": "example/organization_container_settings_edit_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      }
    },
    "/api/container-settings/v1/organization/{organization}/settings/{setting_name}": {
      "parameters": [
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/organization"
        },
        {
          "$ref": "schema/common_request_parameters.json#/components/parameters/setting_name"
        }
      ],
      "get": {
        "summary": "Fetch organization's container setting",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "schema/response/organization_container_setting_response_schema.json"
                },
                "example": {
                  "$ref": "example/organization_container_setting_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      },
      "put": {
        "summary": "Modify organization\\'s container setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "schema/request/organization_container_setting_edit_request_schema.json"
              },
              "example": {
                "$ref": "example/organization_container_setting_edit_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Container Settings"
        ]
      }
    },
    "/api/meta-sites/v1": {
      "get": {
        "summary": "List meta sites",
        "description": "Lists meta sites",
        "operationId": "list_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Sort1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "type",
                          "attributes"
                        ],
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/Id"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "ppms/meta-site"
                            ]
                          },
                          "attributes": {
                            "type": "object",
                            "required": [
                              "name",
                              "created_at",
                              "updated_at"
                            ],
                            "properties": {
                              "name": {
                                "$ref": "#/components/schemas/MetaSiteName"
                              },
                              "created_at": {
                                "$ref": "#/components/schemas/CreatedAt1"
                              },
                              "updated_at": {
                                "$ref": "#/components/schemas/UpdatedAt"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ListBadRequest1"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      },
      "post": {
        "summary": "Add meta site",
        "description": "Adds meta site with unique name. You can add apps to this meta site in\n[/api/meta-sites/v1/{meta_site_id}/relationships/apps](#operation/add_apps_to_meta_site_v1) endpoint.\n",
        "operationId": "add_meta_site_v1",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddMetaSite"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Request data to add new meta site",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/MetaSite"
                        },
                        {
                          "required": [
                            "id",
                            "type",
                            "attributes"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestObject"
                    },
                    {
                      "example": {
                        "errors": [
                          {
                            "status": "400",
                            "code": "error.default",
                            "title": "Invalid form",
                            "detail": "This field is invalid",
                            "source": {
                              "pointer": "/data/attributes/name"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/{meta_site_id}": {
      "get": {
        "summary": "Get meta site",
        "description": "Gets meta site",
        "operationId": "get_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/MetaSite"
                        },
                        {
                          "required": [
                            "id"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      },
      "patch": {
        "summary": "Edit meta site",
        "description": "Edits meta site",
        "operationId": "edit_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EditableMetaSite"
                  }
                }
              }
            }
          },
          "description": "Request data to edit existing meta site",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestObject"
                    },
                    {
                      "example": {
                        "errors": [
                          {
                            "status": "400",
                            "code": "error.default",
                            "title": "Invalid form",
                            "detail": "This value is not valid.",
                            "source": {
                              "pointer": "/data/attributes/currency"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      },
      "delete": {
        "summary": "Delete meta site",
        "description": "Deletes meta site",
        "operationId": "delete_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/{meta_site_id}/relationships/apps": {
      "post": {
        "summary": "Add apps to meta site",
        "description": "Adds apps to meta site. You can add up to 1000 apps to meta site in one api call.",
        "operationId": "add_apps_to_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AppIdentifiersList"
              }
            }
          },
          "description": "Request data to add apps to meta site",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      },
      "delete": {
        "summary": "Remove apps from meta site",
        "description": "Removes apps from meta site. You can remove up to 1000 apps from meta site in one api call.",
        "operationId": "remove_apps_from_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AppIdentifiersList"
              }
            }
          },
          "description": "Request data to remove apps from meta site",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/{meta_site_id}/apps": {
      "get": {
        "summary": "List apps in meta site",
        "description": "Lists apps that belong to given meta site",
        "operationId": "list_apps_in_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/App"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ListBadRequest1"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/{meta_site_id}/apps/excluded": {
      "get": {
        "summary": "List apps excluded from meta site",
        "description": "Lists apps that don't belong to given meta site",
        "operationId": "list_apps_excluded_from_meta_site_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/App"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ListBadRequest1"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/apps-with-meta-sites": {
      "get": {
        "summary": "List apps & meta sites",
        "description": "Get list of apps with meta sites. App with `demo` type will be always first on the list if exists (sorting method is irrelevant)\n\n\nFull example:\n```\n/api/meta-sites/v1/apps-with-meta-sites?offset=100&limit=10&search=nifty+marketing&action=edit\n```\nthis will list 10 apps and meta sites which I have access to (can execute `edit` action) starting on 101th matching search query \"nifty marketing\".\n",
        "operationId": "list_apps_and_meta_sites_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/SortAppsWithMetasites"
          },
          {
            "$ref": "#/components/parameters/Action"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "description": "Resource type",
                            "enum": [
                              "ppms/app",
                              "ppms/meta-site"
                            ],
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/components/schemas/Id"
                          },
                          "attributes": {
                            "type": "object",
                            "required": [
                              "name",
                              "created_at"
                            ],
                            "properties": {
                              "name": {
                                "$ref": "#/components/schemas/Name"
                              },
                              "created_at": {
                                "$ref": "#/components/schemas/CreatedAt1"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "meta": {
                      "total": 2
                    },
                    "data": [
                      {
                        "type": "ppms/app",
                        "id": "6edb1e3c-4c43-4760-ab76-682ad83146be",
                        "attributes": {
                          "name": "Example site",
                          "created_at": "2019-07-30T12:53:46Z"
                        }
                      },
                      {
                        "type": "ppms/meta-site",
                        "id": "ac62ca6b-cfd6-4161-b414-e1061baa05b7",
                        "attributes": {
                          "name": "European landing pages",
                          "created_at": "2019-02-21T02:30:12Z"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ListBadRequest1"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/meta-sites/v1/{meta_site_id}/apps/integrity": {
      "get": {
        "summary": "Meta site integrity",
        "description": "It informs whether all apps of given meta site have the same currency and timezone as meta site itself",
        "operationId": "meta_site_integrity_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaSiteId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "id",
                        "type",
                        "attributes"
                      ],
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Id"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "meta-site/apps/integrity"
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "required": [
                            "valid_currency",
                            "valid_timezone"
                          ],
                          "properties": {
                            "valid_currency": {
                              "type": "boolean",
                              "description": "Flag indicating that all apps of given meta site have the same currency as meta site itself"
                            },
                            "valid_timezone": {
                              "description": "Flag indicating that all apps of given meta site have the same timezone as meta site itself",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundMetaSite"
          }
        },
        "tags": [
          "Meta Sites"
        ]
      }
    },
    "/api/modules/v1": {
      "get": {
        "summary": "Modules list",
        "description": "List of licensed modules with access for a current user",
        "operationId": "list_modules_v1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/ModuleId"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "ppms/module"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "id": "analytics",
                        "type": "ppms/module"
                      },
                      {
                        "id": "tag_manager",
                        "type": "ppms/module"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError2"
          }
        },
        "tags": [
          "Modules"
        ]
      }
    },
    "/api/modules/v1/by-users": {
      "post": {
        "summary": "Modules list for given users",
        "description": "List of modules with access for a list of users",
        "operationId": "accessible_modules_for_users_batch",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "$ref": "#/components/schemas/UserIdentifier"
                    }
                  }
                }
              }
            }
          },
          "description": "list of users"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "maxItems": 100,
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "ppms/user/modules"
                            ]
                          },
                          "id": {
                            "$ref": "#/components/schemas/Id"
                          },
                          "attributes": {
                            "type": "object",
                            "required": [
                              "modules"
                            ],
                            "properties": {
                              "modules": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/ModuleId"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError2"
          },
          "409": {
            "$ref": "#/components/responses/ConflictUserError"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaTypeError"
          }
        },
        "tags": [
          "Modules"
        ]
      }
    },
    "/api/modules/v1/{module}": {
      "get": {
        "summary": "Module",
        "description": "Returns module if it is licensed and user has access to it",
        "operationId": "get_module_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Module"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "id",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/ModuleId"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "ppms/module"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError2"
          },
          "403": {
            "$ref": "#/components/responses/AccessToModuleDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundModule"
          }
        },
        "tags": [
          "Modules"
        ]
      }
    },
    "/api/modules/v1/access/user/{user_id}": {
      "get": {
        "summary": "Modules access list for a given user",
        "description": "Lists all modules to which a given user has access to.\nList contains both explicit access for a user and implicit access inherited from user groups which user belongs to.\n",
        "operationId": "get_user_modules_access_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModulesAccessForUser"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError2"
          },
          "403": {
            "$ref": "#/components/responses/NoJWTError1"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUser"
          }
        },
        "tags": [
          "Modules"
        ]
      },
      "put": {
        "summary": "Set modules access for a given user",
        "description": "Sets modules access for a given user",
        "operationId": "set_modules_access_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "type",
                        "id",
                        "attributes"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Resource type",
                          "enum": [
                            "module/access"
                          ]
                        },
                        "id": {
                          "$ref": "#/components/schemas/ModuleId"
                        },
                        "attributes": {
                          "type": "object",
                          "required": [
                            "access"
                          ],
                          "properties": {
                            "access": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError2"
          },
          "403": {
            "$ref": "#/components/responses/SetAccessForUnlicensedModuleError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUser"
          },
          "409": {
            "$ref": "#/components/responses/ConflictModulesAccessError"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaTypeError"
          }
        },
        "tags": [
          "Modules"
        ]
      }
    },
    "/api/tracker/v2/settings/app/global": {
      "get": {
        "summary": "Get global tracker settings",
        "description": "It gets global tracker settings.",
        "operationId": "api_get_global_tracker_settings_v2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalTrackerSettings"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      },
      "patch": {
        "summary": "Edit global tracker settings",
        "description": "It edits global tracker settings.",
        "operationId": "api_edit_global_tracker_settings_v2",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalTrackerSettings"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidFormBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      }
    },
    "/api/tracker/v2/settings/app/{app_id}": {
      "get": {
        "summary": "Get tracker settings of an app",
        "description": "It gets tracker settings of an app.",
        "operationId": "api_get_app_tracker_settings_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackerAppSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest1"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      },
      "patch": {
        "summary": "Edit tracker settings of an app",
        "description": "It edits tracker settings of an app.",
        "operationId": "api_edit_app_tracker_settings_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id1"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/TrackerAppSettings"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidFormBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      }
    },
    "/api/tracker/v2/settings/app/{app_id}/{setting}": {
      "delete": {
        "summary": "Delete given tracker setting of an app",
        "description": "It deletes given tracker setting of an app. Then global setting will be used instead.",
        "operationId": "api_delete_app_tracker_setting_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id1"
          },
          {
            "$ref": "#/components/parameters/setting"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/InvalidUuidBadRequest1"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      }
    },
    "/api/tracker/v2/settings/app/url": {
      "get": {
        "summary": "Get tracker settings of an app by it's url",
        "description": "It gets tracker settings of an app that first matched against given url. Used mostly in log analytics for website autorecognition.",
        "operationId": "api_get_app_by_url_tracker_settings_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/app_url"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackerAppSettings"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError3"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError1"
          },
          "404": {
            "$ref": "#/components/responses/NoAppWithSuchUrl"
          }
        },
        "tags": [
          "Tracker Settings"
        ]
      }
    },
    "/api/user-groups/v1": {
      "get": {
        "summary": "List user groups",
        "description": "Lists user groups",
        "operationId": "list_user_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupsSearch"
          },
          {
            "$ref": "#/components/parameters/UserGroupsSort"
          },
          {
            "$ref": "#/components/parameters/UserGroupsLimit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      },
      "post": {
        "summary": "Add user group",
        "description": "Adds user group with unique name",
        "operationId": "add_user_group_v1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "description": "Request data to add new user group",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserGroup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/user-groups/v1/{user_group_id}": {
      "get": {
        "summary": "Get user group",
        "description": "Gets specific user group details",
        "operationId": "UserGroupDetails_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserGroup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      },
      "patch": {
        "summary": "Edit user group",
        "description": "Updates user group details",
        "operationId": "edit_user_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserGroup"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "UUID of edited user group (must match `user_group_id` parameter)",
                            "example": "9a67f188-734c-4ba3-8769-912a7e59f3ff"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      },
      "delete": {
        "summary": "Delete user group",
        "description": "Deletes user group",
        "operationId": "delete_user_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/user-groups/v1/{user_group_id}/users": {
      "get": {
        "summary": "Get user group members",
        "description": "Gets user group members",
        "operationId": "list_user_group_users_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          },
          {
            "$ref": "#/components/parameters/UsersSearch"
          },
          {
            "$ref": "#/components/parameters/UsersSort"
          },
          {
            "$ref": "#/components/parameters/Limit2"
          },
          {
            "$ref": "#/components/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/user-groups/v1/{user_group_id}/users/excluded": {
      "get": {
        "summary": "Get users excluded from group",
        "description": "Gets users excluded from given user group",
        "operationId": "list_user_group_users_excluded_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          },
          {
            "$ref": "#/components/parameters/UsersSearch"
          },
          {
            "$ref": "#/components/parameters/UsersSort"
          },
          {
            "$ref": "#/components/parameters/Limit2"
          },
          {
            "$ref": "#/components/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/user-groups/v1/{user_group_id}/relationships/users": {
      "post": {
        "summary": "Add users to user group",
        "description": "Adds users to user group",
        "operationId": "add_users_to_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdentifiersList"
              }
            }
          },
          "description": "Request data to add users to user group",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      },
      "delete": {
        "summary": "Remove users from user group",
        "description": "Remove users from user group",
        "operationId": "remove_users_from_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdentifiersList"
              }
            }
          },
          "description": "Request data to remove users from user group",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/user-groups/v1/{user_group_id}/permissions": {
      "post": {
        "deprecated": true,
        "summary": "Set permission group",
        "description": "Sets permission group to entity for user group",
        "operationId": "set_permission_group_for_user_group_v1",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserGroupId1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPermissionGroup"
              }
            }
          },
          "description": "Request data to set permission group for user group",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "User Groups"
        ]
      }
    },
    "/api/users/v2/invite": {
      "post": {
        "summary": "Invite user",
        "operationId": "api_users_invited_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_User_Invite"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/JsonApi_Id"
                        },
                        "type": {
                          "$ref": "#/components/schemas/JsonApi_Type1"
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "email": {
                              "$ref": "#/components/schemas/User_Email"
                            },
                            "role": {
                              "$ref": "#/components/schemas/User_Role"
                            },
                            "addedAt": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "language": {
                              "$ref": "#/components/schemas/Language"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/Bad_Request"
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2": {
      "post": {
        "deprecated": true,
        "description": "Please use <a href=\"#operation/api_users_invited_v2\">Invite user</a> instead.\nIt adds user.\n",
        "summary": "Create user",
        "operationId": "api_users_add_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_User_Create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApi_User_Object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorObject"
                    }
                  ]
                },
                "examples": {
                  "Required characters missing in password": {
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "title": "Invalid form",
                          "detail": "Password is invalid. It must contain at least one numeric digit, one uppercase, and one lowercase letter",
                          "code": "users.error.invalid-new-password",
                          "source": {
                            "pointer": "/password"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "get": {
        "summary": "Get users list",
        "operationId": "api_users_list_v2",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/sort1"
          },
          {
            "$ref": "#/components/parameters/search1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ListMetadata"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JsonApi_User"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2/{userId}": {
      "get": {
        "summary": "Get details of an user",
        "operationId": "api_users_user_details_v2",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApi_User_Object"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "operationId": "api_users_delete_v2",
        "responses": {
          "204": {
            "$ref": "#/components/schemas/No_Content"
          },
          "400": {
            "$ref": "#/components/schemas/Bad_Request"
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          },
          "404": {
            "$ref": "#/components/schemas/Not_Found"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Edit user",
        "operationId": "api_users_edit_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_Edit_User"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/schemas/No_Content"
          },
          "400": {
            "$ref": "#/components/schemas/Bad_Request"
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          },
          "404": {
            "$ref": "#/components/schemas/Not_Found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2/{userId}/change-role": {
      "patch": {
        "summary": "Change user role",
        "operationId": "api_users_change_role_v2",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_Change_Role"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/schemas/No_Content"
          },
          "400": {
            "$ref": "#/components/schemas/Bad_Request"
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          },
          "404": {
            "$ref": "#/components/schemas/Not_Found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2/me/change-password": {
      "patch": {
        "summary": "Change my password",
        "operationId": "api_users_me_change_password_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_Change_Password"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/schemas/No_Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorObject"
                    }
                  ]
                },
                "examples": {
                  "Required characters missing in password": {
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "title": "Invalid form",
                          "detail": "Password is invalid. It must contain at least one numeric digit, one uppercase, and one lowercase letter",
                          "code": "users.error.invalid-new-password",
                          "source": {
                            "pointer": "/newPassword"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/Not_Found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2/me/details": {
      "get": {
        "deprecated": true,
        "description": "Please use <a href=\"#operation/api_users_me_details_v2\">Current user details</a> instead.\nIt gets current user details.\n",
        "summary": "Current user details",
        "operationId": "deprecated_api_user_details_v2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/JsonApi_User"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v2/me": {
      "get": {
        "summary": "Current user details",
        "operationId": "api_users_me_details_v2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/JsonApi_User"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Edit own account",
        "operationId": "api_users_me_edit_v2",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApi_Edit_User"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/schemas/No_Content"
          },
          "400": {
            "$ref": "#/components/schemas/Bad_Request"
          },
          "403": {
            "$ref": "#/components/schemas/Forbidden"
          },
          "404": {
            "$ref": "#/components/schemas/Not_Found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}/changelog": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        }
      ],
      "get": {
        "summary": "Get list of changes",
        "parameters": [
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[limit]"
          },
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[offset]"
          },
          {
            "$ref": "changelog/api/changelog_request_parameters.json#/components/parameters/filter[resource_id]"
          },
          {
            "$ref": "changelog/api/changelog_request_parameters.json#/components/parameters/filter[author]"
          },
          {
            "$ref": "changelog/api/changelog_request_parameters.json#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List of changes",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "changelog/schema/list/changelog_list_response_schema.json"
                },
                "example": {
                  "$ref": "changelog/example/list/changelog_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/operations/{operation_id}": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "operations/api/operations_request_parameters.json#/components/parameters/operation_id"
        }
      ],
      "get": {
        "summary": "Get operation",
        "responses": {
          "200": {
            "description": "Get operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "operations/schema/get/operations_get_response_schema.json"
                },
                "example": {
                  "$ref": "operations/example/get/operations_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/tags": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "List of tags",
        "description": "### JSON API compatibility divergence\n\n#### Filters\nIn JSON API standard (https://jsonapi.org/recommendations/#filtering) one can request elements with multiple\nfilter values by simply providing them separated by coma:\n\n`tags?filter[template]=piwik,adroll`\n\nThis notation will not work here. You can achieve this functionality by providing multiple filters for the same parameter:\n\n`tags?filter[template][]=piwik&filter[template][]=adroll`\n",
        "parameters": [
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[limit]"
          },
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[offset]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/filter[name]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/filter[is_active]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/filter[tag_type]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/filter[template]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/filter[is_prioritized]"
          },
          {
            "$ref": "tags/api/tags_request_parameters.json#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "tags/schema/list/tags_list_response_schema.json"
                },
                "example": {
                  "$ref": "tags/example/list/tags_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "patch": {
        "summary": "Edit tags order",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "tags/schema/list/tags_edit_order_request_schema.json"
              },
              "example": {
                "$ref": "tags/example/list/tags_edit_order_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "post": {
        "summary": "Create tag",
        "description": "See more details about API changes: <a href=\"#section/Deprecations-and-changes\">Deprecations and changes</a>\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "tags/schema/create/tags_create_request_schema.json"
              },
              "examples": {
                "Custom tag": {
                  "description": "Custom tag without triggers",
                  "externalValue": "tags/example/create/tags_create_request_example.json"
                },
                "Custom tag with triggers": {
                  "description": "Custom tag with triggers",
                  "externalValue": "tags/example/create/tags_create_request_example_with_triggers.json"
                },
                "A/B tasty template": {
                  "description": "A/B tasty template",
                  "externalValue": "tags/example/create/tags_create_request_example_ab_tasty.json"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "tags/schema/create/tags_create_response_schema.json"
                },
                "example": {
                  "$ref": "tags/example/get/tags_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{appId}/tags/{tag_id}": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "tags/api/tags_request_parameters.json#/components/parameters/tag_id"
        }
      ],
      "get": {
        "summary": "Get tag",
        "responses": {
          "200": {
            "description": "Tag data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "tags/schema/get/tags_get_response_schema.json"
                },
                "example": {
                  "$ref": "tags/example/get/tags_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "patch": {
        "summary": "Edit tag",
        "description": "See more details about API changes: <a href=\"#section/Deprecations-and-changes\">Deprecations and changes</a>\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "tags/schema/edit/tags_edit_request_schema.json"
              },
              "example": {
                "$ref": "tags/example/edit/tags_edit_request_example.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "delete": {
        "summary": "Delete tag",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/tags/{tag_id}/copy": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "tags/api/tags_request_parameters.json#/components/parameters/tag_id"
        }
      ],
      "post": {
        "summary": "Copy tag",
        "responses": {
          "202": {
            "description": "Operation data with new (copied) tag identifier",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "tags/schema/copy/tags_copy_response_schema.json"
                },
                "example": {
                  "$ref": "tags/example/copy/tags_copy_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "tags/schema/copy/tags_copy_request_schema.json"
              },
              "example": {
                "$ref": "tags/example/copy/tags_copy_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/variables": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "List of variables",
        "description": "### JSON API compatibility divergence\n\n#### Filters\nIn JSON API standard (https://jsonapi.org/recommendations/#filtering) one can request elements with multiple\nfilter values by simply providing them separated by coma:\n\n`variables?filter[variable_type]=url,constant`\n\nThis notation will not work here. You can achieve this functionality by providing multiple filters for the same parameter:\n\n`variables?filter[variable_type][]=url&filter[variable_type][]=constant`\n",
        "parameters": [
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[limit]"
          },
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[offset]"
          },
          {
            "$ref": "variables/api/variables_request_parameters.json#/components/parameters/filter[name]"
          },
          {
            "$ref": "variables/api/variables_request_parameters.json#/components/parameters/filter[variable_type]"
          },
          {
            "$ref": "variables/api/variables_request_parameters.json#/components/parameters/filter[builtin]"
          },
          {
            "$ref": "variables/api/variables_request_parameters.json#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List of variables",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "variables/schema/list/variables_list_response_schema.json"
                },
                "example": {
                  "$ref": "variables/example/list/variables_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "post": {
        "summary": "Create variable",
        "responses": {
          "201": {
            "description": "Variable data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "variables/schema/create/variables_create_response_schema.json"
                },
                "example": {
                  "$ref": "variables/example/create/variables_create_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "variables/schema/create/variables_create_request_schema.json"
              },
              "example": {
                "$ref": "variables/example/create/variables_create_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/variables/{variable_id}": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "variables/api/variables_request_parameters.json#/components/parameters/variable_id"
        }
      ],
      "get": {
        "summary": "Get variable",
        "responses": {
          "200": {
            "description": "Variable data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "variables/schema/get/variables_get_response_schema.json"
                },
                "example": {
                  "$ref": "variables/example/get/variables_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "patch": {
        "summary": "Edit variable",
        "description": "It is possible to edit variable's type. Just make a request with a new type and all required attributes from its schema.",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "variables/schema/edit/variables_edit_request_schema.json"
              },
              "example": {
                "$ref": "variables/example/edit/variables_edit_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      },
      "delete": {
        "summary": "Delete variable",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/variables/{variable_id}/copy": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "variables/api/variables_request_parameters.json#/components/parameters/variable_id"
        }
      ],
      "post": {
        "summary": "Copy variable",
        "responses": {
          "202": {
            "description": "Operation data with new (copied) variable identifier",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "variables/schema/copy/variables_copy_response_schema.json"
                },
                "example": {
                  "$ref": "variables/example/copy/variables_copy_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "variables/schema/copy/variables_copy_request_schema.json"
              },
              "example": {
                "$ref": "variables/example/copy/variables_copy_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "List of versions",
        "description": "### JSON API compatibility divergence\n\n#### Filters\nIn JSON API standard (https://jsonapi.org/recommendations/#filtering) one can request elements with multiple\nfilter values by simply providing them separated by coma:\n\n`versions?filter[version_type][]=published,draft`\n\nThis notation will not work here. You can achieve this functionality by providing multiple filters for the same parameter:\n\n`versions?filter[version_type][]=published&filter[version_type][]=draft`\n",
        "parameters": [
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[limit]"
          },
          {
            "$ref": "common/api/common_request_parameters.json#/components/parameters/page[offset]"
          },
          {
            "$ref": "versions/api/versions_request_parameters.json#/components/parameters/filter[version_type]"
          },
          {
            "$ref": "versions/api/versions_request_parameters.json#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/list/versions_list_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/list/versions_list_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        }
      ],
      "get": {
        "summary": "Get version",
        "responses": {
          "200": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/get/versions_get_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/get/versions_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/draft": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "Get draft version",
        "responses": {
          "200": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/get/versions_get_draft_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/get/versions_get_draft_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/published": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "Get published version",
        "responses": {
          "200": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/get/versions_get_published_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/get/versions_get_published_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/published/restore": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "post": {
        "summary": "Restore published version",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/restore/versions_restore_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/restore/versions_restore_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}/restore": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        }
      ],
      "post": {
        "summary": "Restore version by id",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/restore/versions_restore_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/restore/versions_restore_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/draft/snapshot": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "post": {
        "summary": "Snapshot draft version",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/snapshot/versions_snapshot_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/snapshot/versions_snapshot_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}/export-files": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        }
      ],
      "post": {
        "summary": "Create export file",
        "responses": {
          "202": {
            "description": "Export file data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/export/versions_export_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/export/versions_export_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request_uri_parameter"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "versions/schema/export/versions_export_request_schema.json"
              },
              "example": {
                "$ref": "versions/example/export/versions_export_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}/export-files/{export_file_id}": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/export_file_id"
        }
      ],
      "get": {
        "summary": "Get export file",
        "responses": {
          "200": {
            "description": "Export file",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/export_files_get/versions_export_files_get_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/export_files_get/versions_export_files_get_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/draft/publish": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "post": {
        "summary": "Publish draft version",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/publish/versions_publish_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/publish/versions_publish_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/{version_id}/publish": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        },
        {
          "$ref": "versions/api/versions_request_parameters.json#/components/parameters/version_id"
        }
      ],
      "post": {
        "summary": "Publish version by id",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/publish/versions_publish_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/publish/versions_publish_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/import": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "post": {
        "summary": "Import version",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/import/versions_import_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/import/versions_import_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "versions/schema/import/versions_import_request_schema.json"
              },
              "example": {
                "$ref": "versions/example/import/versions_import_request_example.json"
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    },
    "/api/tag/v1/{app_id}/versions/import-file": {
      "parameters": [
        {
          "$ref": "common/api/common_request_parameters.json#/components/parameters/app_id"
        }
      ],
      "post": {
        "summary": "Import version from file",
        "responses": {
          "202": {
            "description": "Version data",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "versions/schema/import/versions_import_response_schema.json"
                },
                "example": {
                  "$ref": "versions/example/import/versions_import_response_example.json"
                }
              }
            }
          },
          "400": {
            "$ref": "common/api/common_error_responses.json#/components/responses/bad_request"
          },
          "401": {
            "$ref": "common/api/common_error_responses.json#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "common/api/common_error_responses.json#/components/responses/not_found"
          },
          "500": {
            "$ref": "common/api/common_error_responses.json#/components/responses/internal_server_error"
          },
          "503": {
            "$ref": "common/api/common_error_responses.json#/components/responses/service_unavailable"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "application/json"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tag Manager"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "EntityActionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApiResourceObject"
              },
              {
                "properties": {
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of available actions for a given entity"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "example": {
          "data": {
            "type": "ppms/permission/entity/actions",
            "id": "50fca71a-e4a7-4480-a612-a9ffbdf0935f",
            "attributes": {
              "actions": [
                "view",
                "edit",
                "publish",
                "delete",
                "manage",
                "add"
              ]
            }
          }
        }
      },
      "AppsWithGrantedAction": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta information",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Number of records found"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/JsonApiId"
                },
                "type": {
                  "$ref": "#/components/schemas/JsonApiType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "entityType": {
                      "type": "string",
                      "description": "Entity type",
                      "enum": [
                        "ppms/app"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "meta": {
            "total": 2
          },
          "data": [
            {
              "id": "e0180272-d1f5-4bb5-a7d3-0f1a138eacd5",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/app"
              }
            },
            {
              "id": "ccc9c3a4-fd65-4755-900f-2590460aff44",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/app"
              }
            }
          ]
        }
      },
      "MetaSitesWithGrantedAction": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta information",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Number of records found"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/JsonApiId"
                },
                "type": {
                  "$ref": "#/components/schemas/JsonApiType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "entityType": {
                      "type": "string",
                      "description": "Entity type",
                      "enum": [
                        "ppms/meta-site"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "meta": {
            "total": 2
          },
          "data": [
            {
              "id": "e0180272-d1f5-4bb5-a7d3-0f1a138eacd5",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/meta-site"
              }
            },
            {
              "id": "ccc9c3a4-fd65-4755-900f-2590460aff44",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/meta-site"
              }
            }
          ]
        }
      },
      "UsersWithGrantedAction": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta information",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Number of records found"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/JsonApiId"
                },
                "type": {
                  "$ref": "#/components/schemas/JsonApiType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "entityType": {
                      "type": "string",
                      "description": "Entity type",
                      "enum": [
                        "ppms/user"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "meta": {
            "total": 2
          },
          "data": [
            {
              "id": "e0180272-d1f5-4bb5-a7d3-0f1a138eacd5",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/user"
              }
            },
            {
              "id": "ccc9c3a4-fd65-4755-900f-2590460aff44",
              "type": "ppms/permission/entity",
              "attributes": {
                "entityType": "ppms/user"
              }
            }
          ]
        }
      },
      "UserGroupPermissionsForMetaSite": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/JsonApiId"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "meta-site/permission/user-group"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "name",
                    "permission"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of user group",
                      "example": "User Group Name"
                    },
                    "permission": {
                      "$ref": "#/components/schemas/MetaSitePermission"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserPermissionsForApp": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JsonApiId"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "app/permission/user"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "email",
              "group_permissions",
              "permissions"
            ],
            "properties": {
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "group_permissions": {
                "type": "object",
                "required": [
                  "group_names",
                  "permission"
                ],
                "properties": {
                  "group_names": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Managers"
                    }
                  },
                  "permission": {
                    "$ref": "#/components/schemas/AppPermission"
                  }
                }
              },
              "permission": {
                "$ref": "#/components/schemas/AppPermission"
              }
            }
          }
        }
      },
      "DeprecatedUserPermissionsForApp": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JsonApiId"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "ppms/permissions/group"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "email",
              "group_permissions",
              "permissions"
            ],
            "properties": {
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "group_permissions": {
                "type": "object",
                "required": [
                  "group_names",
                  "permission"
                ],
                "properties": {
                  "group_names": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Managers"
                    }
                  },
                  "permission": {
                    "$ref": "#/components/schemas/AppPermission"
                  }
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AppPermission"
                }
              }
            }
          }
        }
      },
      "UserPermissionsForMetaSite": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JsonApiId"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "meta-site/permission/user"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "email",
              "group_permissions",
              "permissions"
            ],
            "properties": {
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "group_permissions": {
                "type": "object",
                "required": [
                  "group_names",
                  "permission"
                ],
                "properties": {
                  "group_names": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Managers"
                    }
                  },
                  "permission": {
                    "$ref": "#/components/schemas/MetaSitePermission"
                  }
                }
              },
              "permission": {
                "$ref": "#/components/schemas/MetaSitePermission"
              }
            }
          }
        }
      },
      "PermissionSet": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ppms/permissions/group"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "entity": {
                "type": "string",
                "enum": [
                  "ppms/app"
                ]
              },
              "entityId": {
                "type": "string",
                "format": "uuid",
                "description": "UUIDv4 identifier of given entity",
                "example": "94445dcb-4da3-4e24-9f7b-c685aacc5a2a"
              },
              "group": {
                "type": "string",
                "enum": [
                  "no-access",
                  "view",
                  "edit",
                  "edit-publish",
                  "manage"
                ]
              },
              "targetUserId": {
                "type": "string",
                "format": "uuid",
                "description": "UUIDv4 identifier of user which will receive permissions",
                "example": "94445dcb-4da3-4e24-9f7b-c685aacc5a2a"
              }
            }
          }
        },
        "example": {
          "type": "ppms/permissions/group",
          "attributes": {
            "entity": "ppms/app",
            "entityId": "50fca71a-e4a7-4480-a612-a9ffbdf0935f",
            "group": "manage",
            "targetUserId": "8275cf58-93db-4cda-9d11-7262376c2c72"
          }
        }
      },
      "AppPermissionForUserSet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "app/permission/user"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "permission"
                ],
                "properties": {
                  "permission": {
                    "$ref": "#/components/schemas/AppPermission"
                  }
                }
              }
            }
          }
        }
      },
      "AppPermissionForUserGroupSet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "app/permission/user-group"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "permission"
                ],
                "properties": {
                  "permission": {
                    "$ref": "#/components/schemas/AppPermission"
                  }
                }
              }
            }
          }
        }
      },
      "MetaSitePermissionForUserGroupSet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "meta-site/permission/user-group"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "permission"
                ],
                "properties": {
                  "permission": {
                    "$ref": "#/components/schemas/MetaSitePermission"
                  }
                }
              }
            }
          }
        }
      },
      "MetaSitePermissionForUserSet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "meta-site/permission/user"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "permission"
                ],
                "properties": {
                  "permission": {
                    "$ref": "#/components/schemas/MetaSitePermission"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalActions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Resource type",
                  "enum": [
                    "ppms/app",
                    "ppms/user",
                    "ppms/meta-site"
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Resource type",
                  "enum": [
                    "ppms/permissions/global"
                  ],
                  "type": "string"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of global actions for authorized user"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "data": [
            {
              "id": "ppms/app",
              "type": "ppms/permissions/global",
              "attributes": {
                "permissions": [
                  "add"
                ]
              }
            },
            {
              "id": "ppms/user",
              "type": "ppms/permissions/global",
              "attributes": {
                "permissions": [
                  "list",
                  "add",
                  "demote_app_manager",
                  "demote_meta_site_manager"
                ]
              }
            },
            {
              "id": "ppms/meta-site",
              "type": "ppms/permissions/global",
              "attributes": {
                "permissions": [
                  "add",
                  "delete"
                ]
              }
            }
          ]
        }
      },
      "JsonApiId": {
        "type": "string",
        "format": "uuid",
        "description": "Resource ID",
        "example": "985ed9d7-b652-47b8-b9cf-c17d62735261"
      },
      "JsonApiType": {
        "type": "string",
        "description": "Resource type, unique across whole PPAS",
        "example": "ppms/user"
      },
      "JsonApiResourceObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JsonApiId"
          },
          "type": {
            "$ref": "#/components/schemas/JsonApiType"
          },
          "attributes": {
            "type": "object"
          }
        }
      },
      "ListMetadata": {
        "type": "object",
        "description": "Metadata of a listing",
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items",
            "example": 1
          }
        }
      },
      "Email": {
        "type": "string",
        "format": "email",
        "description": "User email",
        "example": "example@example.com"
      },
      "AppPermission": {
        "type": "string",
        "description": "Permission for `ppms/app` (for example `edit-publish` contains actions `view`, `edit` and `publish`)",
        "enum": [
          "no-access",
          "view",
          "edit",
          "edit-publish",
          "manage"
        ],
        "example": "manage"
      },
      "MetaSitePermission": {
        "type": "string",
        "description": "Permission for `ppms/meta-site` (for example `manage` contains actions `view` nad `edit`)",
        "enum": [
          "no-access",
          "view",
          "edit",
          "manage"
        ],
        "example": "manage"
      },
      "ErrorObject": {
        "type": "object",
        "required": [
          "status",
          "title"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "the HTTP status code applicable to this problem, expressed as a string value",
            "example": "400"
          },
          "code": {
            "type": "string",
            "description": "an application-specific error code, expressed as a string value",
            "example": "error.default"
          },
          "title": {
            "type": "string",
            "description": "a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization\n",
            "example": "Invalid form"
          },
          "detail": {
            "type": "string",
            "description": "a human-readable explanation specific to this occurrence of the problem. Like `title`, this field’s value can be localized\n",
            "example": "This field is invalid"
          },
          "source": {
            "type": "object",
            "description": "an object containing references to the source of the error, optionally including any of the following members: [pointer, parameter]\n",
            "properties": {
              "pointer": {
                "type": "string",
                "example": "/data/attributes/name",
                "description": "a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/name\" for a specific attribute]\n"
              },
              "parameter": {
                "type": "string",
                "example": "offset",
                "description": "a string indicating which URI query parameter caused the error"
              }
            }
          }
        }
      },
      "BadRequestObject": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              ]
            }
          }
        }
      },
      "UserGroupPermission": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "type": "object",
            "required": [
              "total"
            ],
            "description": "Meta information",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of entries found",
                "example": 1
              }
            }
          },
          "data": {
            "type": "array",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/JsonApiId"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "app/permission/user-group"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "name",
                    "permission"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of user group",
                      "example": "User Group Name"
                    },
                    "permission": {
                      "type": "string",
                      "description": "Permission",
                      "example": "manage"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "App_Name": {
        "type": "string",
        "description": "App name",
        "maxLength": 90,
        "example": "AppName"
      },
      "App_Urls": {
        "type": "array",
        "description": "List of URL's under which the app is available (each URL needs to start with ``http://`` or ``https://``)\n",
        "items": {
          "type": "string"
        },
        "example": [
          "http://example.com"
        ]
      },
      "App_Timezone": {
        "type": "string",
        "description": "It allows to specify the timezone for your app (using IANA format), and tracked data will show date & time of this time zone. Please note that changing the timezone will not affect previous logs in reports.",
        "example": "UTC"
      },
      "App_Currency": {
        "type": "string",
        "description": "App currency. It specifies the default currency for Goal revenues shown in Analytics. By default, Analytics reports display revenue in US dollars.",
        "example": "USD"
      },
      "App_AddedAt": {
        "type": "string",
        "description": "When app was added",
        "example": "2018-07-10T08:50:41+00:00",
        "format": "date-time"
      },
      "App_UpdatedAt": {
        "type": "string",
        "description": "When app was edited",
        "example": "2018-09-01T10:25:11+00:00",
        "format": "date-time"
      },
      "App_Organization": {
        "type": "string",
        "description": "Organization to which an app belongs to",
        "example": "default"
      },
      "New_App_Id": {
        "type": "string",
        "description": "App ID",
        "example": "985ed9d7-b652-47b8-b9cf-c17d62735261",
        "format": "uuid"
      },
      "New_App_App_Type": {
        "type": "string",
        "description": "App type",
        "example": "web",
        "enum": [
          "web",
          "sharepoint"
        ],
        "default": "web"
      },
      "App_Type": {
        "type": "string",
        "description": "App type",
        "example": "web",
        "enum": [
          "web",
          "sharepoint",
          "demo"
        ],
        "default": "web"
      },
      "JsonApi_Id": {
        "type": "string",
        "format": "uuid",
        "description": "Resource ID",
        "example": "985ed9d7-b652-47b8-b9cf-c17d62735261"
      },
      "JsonApi_Type": {
        "type": "string",
        "description": "Resource type, unique across whole PPAS",
        "example": "ppms/app"
      },
      "JsonApi_Resource_Object": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JsonApi_Type"
          },
          "id": {
            "$ref": "#/components/schemas/JsonApi_Id"
          },
          "attributes": {
            "type": "object"
          }
        }
      },
      "EditApp_JsonApi": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApi_Resource_Object"
              },
              {
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/App_Editable_Attributes"
                  }
                }
              }
            ]
          }
        }
      },
      "App_NewApp_JsonApi": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/JsonApi_Type"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "name",
                  "urls"
                ],
                "allOf": [
                  {
                    "properties": {
                      "id": {
                        "$ref": "#/components/schemas/New_App_Id"
                      },
                      "appType": {
                        "$ref": "#/components/schemas/New_App_App_Type"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/App_Editable_Attributes"
                  }
                ]
              }
            }
          }
        }
      },
      "App_Permissions_JsonApi": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Total"
          },
          "data": {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Resource type, unique across whole PPAS",
                    "example": "ppms/app_permissions_for_user"
                  },
                  "id": {
                    "$ref": "#/components/schemas/JsonApi_Id"
                  },
                  "attributes": {
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "description": "Display name",
                        "type": "string",
                        "example": "email@adress.com"
                      },
                      "access": {
                        "description": "Access list",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "view"
                        ]
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "App_User_Group_Permissions_JsonApi": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Total"
          },
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Resource type, unique across whole PPAS",
                "example": "ppms/app_permissions_for_user_group"
              },
              "id": {
                "$ref": "#/components/schemas/JsonApi_Id"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "app_name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "Example App"
                  },
                  "access": {
                    "description": "Permission group to given app",
                    "type": "string",
                    "example": "view"
                  }
                }
              }
            }
          }
        }
      },
      "App_List_JsonApi": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Total"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Resource type",
                  "enum": [
                    "ppms/app"
                  ],
                  "type": "string"
                },
                "id": {
                  "$ref": "#/components/schemas/JsonApi_Id"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "$ref": "#/components/schemas/App_Name"
                    },
                    "addedAt": {
                      "$ref": "#/components/schemas/App_AddedAt"
                    },
                    "updatedAt": {
                      "$ref": "#/components/schemas/App_UpdatedAt"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "App_JsonApi": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApi_Resource_Object"
              },
              {
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/App_Attributes"
                  }
                }
              }
            ]
          }
        }
      },
      "App_Editable_Attributes": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/App_Name"
          },
          "urls": {
            "$ref": "#/components/schemas/App_Urls"
          },
          "timezone": {
            "$ref": "#/components/schemas/App_Timezone"
          },
          "currency": {
            "$ref": "#/components/schemas/App_Currency"
          },
          "excludeUnknownUrls": {
            "type": "boolean",
            "description": "Track only visits and actions when URL starts with one of `urls`\n",
            "default": false,
            "example": false
          },
          "keepUrlFragment": {
            "type": "boolean",
            "description": "Disable this setting to exclude Page URL fragments (everything after #, e.g. `example.org/index.html#first_section` will be tracked as `example.org.index.html`)\n",
            "default": true,
            "example": true
          },
          "eCommerceTracking": {
            "type": "boolean",
            "description": "Enables e-commerce reports, additional tab is shown in Analytics module with e-commerce logs. Sales can be easily tracked using this setting.",
            "default": false,
            "example": false
          },
          "siteSearchTracking": {
            "deprecated": true,
            "type": "boolean",
            "description": "To disable internal search engine tracking, just set `site_search_category_params` and `site_search_query_params` to empty lists (`[]`) in <a href=\"?path=./tracker/public_v2.yaml#operation/api_edit_global_tracker_settings_v2\">Tracker Settings</a>. Track and report what users are searching in your apps internal search engine",
            "default": true,
            "example": true
          },
          "siteSearchQueryParams": {
            "type": "array",
            "description": "Site search query params for an app\n",
            "default": [
              "q",
              "query",
              "s",
              "search",
              "searchword",
              "keyword"
            ],
            "items": {
              "type": "string"
            },
            "example": [
              "q",
              "query",
              "s",
              "search",
              "searchword",
              "keyword"
            ]
          },
          "siteSearchCategoryParams": {
            "type": "array",
            "description": "Site search category params for an app\n",
            "default": [],
            "items": {
              "type": "string"
            },
            "example": []
          },
          "delay": {
            "type": "integer",
            "description": "Delay (in ms) is used to slow down actions (e.g. redirect) when waiting for tags to be resolved",
            "default": 500,
            "example": 500
          },
          "excludedIps": {
            "type": "array",
            "description": "List of IPs (IPv4 and IPv6) to blacklist from tracking, e.g `192.168.0.0` or `2607:f0d0:1002:51::4`. You can use wildcards, e.g. `1.2.3.*`, `1.2.*.*` or `::7:*`\n",
            "default": [],
            "items": {
              "type": "string"
            },
            "example": [
              "192.168.0.0",
              "172.16.0.0",
              "1.2.*.*",
              "2607:f0d0:1002:51::4",
              "::7:*"
            ]
          },
          "excludedUrlParams": {
            "type": "array",
            "description": "URL query parameters excluded by default from tracking: `gclid`, `fb_xd_fragment`, `fb_comment_id`, `phpsessid`, `jsessid`, `aspsessid`, `doing_wp_cron`, `sid` and `pk_vid`. Regular expressions such as `/^sess.*|.*[dD]ate$/` are supported\n",
            "default": [],
            "items": {
              "type": "string"
            },
            "example": [
              "pl_medium",
              "pk_source",
              "fb_comment_id",
              "/^sess.*|.*[dD]ate$/"
            ]
          },
          "excludedUserAgents": {
            "type": "array",
            "description": "If the visitor's user agent string contains any of the strings you specify, the visitor will be excluded from tracking\n",
            "default": [],
            "items": {
              "type": "string"
            },
            "example": [
              "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0",
              "Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12 Version/12.16"
            ]
          },
          "gdpr": {
            "type": "boolean",
            "description": "Enable collection of privacy consent for full GDPR compliance. The compliance form will be triggered if you serve your users tags that require consent",
            "default": true,
            "example": true
          },
          "gdprUserModeEnabled": {
            "type": "boolean",
            "description": "Gdpr User Mode enabled or disabled for an app",
            "default": false,
            "example": false
          },
          "privacyCookieDomainsEnabled": {
            "type": "boolean",
            "description": "Privacy cookie domains enabled or disabled for an app",
            "default": false,
            "example": false
          },
          "privacyCookieExpirationPeriod": {
            "type": "integer",
            "description": "Privacy cookie expiration period (in seconds, default is one year)",
            "default": 31536000,
            "example": 31536000
          },
          "privacyCookieDomains": {
            "type": "array",
            "description": "List of privacy cookie domains for an app (works if `privacyCookieDomainsEnabled` is true), you can also use wildcards like ``*.example.com``",
            "default": [],
            "items": {
              "type": "string"
            },
            "example": [
              "*.example.com",
              "example.com"
            ]
          },
          "gdprLocationRecognition": {
            "type": "boolean",
            "description": "Use geolocation to detect UE visitors and present consent forms only to them",
            "default": true,
            "example": true
          },
          "gdprDataAnonymization": {
            "type": "boolean",
            "description": "Track only a minimal amount of users data, for which we don't need to gather their consent. Any data points considered as personally identifiable information will not be tracked unless the consent is provided",
            "default": true,
            "example": true
          },
          "sharepointIntegration": {
            "type": "boolean",
            "description": "Enable sharepoint integration",
            "default": false,
            "example": false
          },
          "gdprDataAnonymizationMode": {
            "type": "string",
            "description": "Anonymization mode",
            "enum": [
              "no_device_storage",
              "session_cookie_id"
            ],
            "default": "session_cookie_id"
          },
          "privacyUseCookies": {
            "type": "boolean",
            "description": "Use cookies to recognize new and returning visitors",
            "default": true
          },
          "privacyUseFingerprinting": {
            "type": "boolean",
            "description": "Use fingerprinting to recognize new and returning visitors",
            "default": true
          },
          "cnil": {
            "type": "boolean",
            "description": "Enable CNIL integration",
            "default": false,
            "example": false
          },
          "sessionIdStrictPrivacyMode": {
            "type": "boolean",
            "description": "Don't collect visitor’s device data (compliace with the German Data Protection Act - TTDSG)",
            "default": false,
            "example": false
          }
        }
      },
      "App_Attributes": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "organization": {
                "$ref": "#/components/schemas/App_Organization"
              },
              "appType": {
                "$ref": "#/components/schemas/App_Type"
              },
              "addedAt": {
                "$ref": "#/components/schemas/App_AddedAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/App_UpdatedAt"
              }
            }
          },
          {
            "$ref": "#/components/schemas/App_Editable_Attributes"
          }
        ]
      },
      "Total": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total count of objects",
            "example": 1
          }
        }
      },
      "Id": {
        "type": "string",
        "format": "uuid",
        "description": "UUIDv4 identifier of an object",
        "example": "6edb1e3c-4c43-4760-ab76-682ad83146be"
      },
      "EntryProperties": {
        "type": "object",
        "required": [
          "created_at",
          "type",
          "payload",
          "author_id",
          "author_email",
          "subject_id",
          "ip",
          "version"
        ],
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "payload": {
            "$ref": "#/components/schemas/Payload"
          },
          "author_id": {
            "$ref": "#/components/schemas/Id"
          },
          "author_email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Email1"
              },
              {
                "nullable": true
              }
            ]
          },
          "subject_id": {
            "$ref": "#/components/schemas/Id"
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ip"
              },
              {
                "nullable": true
              }
            ]
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Entry": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "ppms/audit-log-entry"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/EntryProperties"
          }
        }
      },
      "CreatedAt": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp of event occurrence (ISO-8601 format)",
        "readOnly": true
      },
      "Type": {
        "type": "string",
        "description": "Name of the event",
        "example": "app.added"
      },
      "Payload": {
        "type": "object",
        "example": {
          "id": "4faa8732-8877-40aa-b772-7b243bf60423",
          "name": "Important name"
        }
      },
      "Ip": {
        "description": "Event author ip address (IPv4 or IPv6)",
        "example": "193.17.41.169",
        "type": "string",
        "oneOf": [
          {
            "format": "IPv4"
          },
          {
            "format": "IPv6"
          }
        ]
      },
      "Version": {
        "description": "Version of an event (e.g. version `1` of `app.added` could be not compatible with version `2`)",
        "type": "integer",
        "minimum": 1
      },
      "Email1": {
        "type": "string",
        "format": "email",
        "example": "john@doe.com"
      },
      "QueryParamErrorObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorObject1"
          },
          {
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "code",
                    "title"
                  ],
                  "properties": {
                    "source": {
                      "type": "object",
                      "properties": {
                        "parameter": {
                          "type": "string",
                          "description": "string indicating which URI query parameter caused the error.",
                          "example": "filter[ip]"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ErrorObject1": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "code",
                "title"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "the HTTP status code applicable to this problem, expressed as a string value",
                  "example": "400"
                },
                "code": {
                  "type": "string",
                  "description": "an application-specific error code, expressed as a string value",
                  "example": "invalid"
                },
                "detail": {
                  "type": "string",
                  "description": "a human-readable explanation specific to this occurrence of the problem. This field’s value can be localized",
                  "example": "'512.xxx.123' does not appear to be an IPv4 or IPv6 address"
                }
              }
            }
          }
        }
      },
      "Meta": {
        "type": "object",
        "description": "Response meta",
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer"
          }
        }
      },
      "MetaSite": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "ppms/meta-site"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/MetaSiteAttributes"
          }
        }
      },
      "MetaSiteAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/MetaSiteName"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "e_commerce_tracking": {
            "$ref": "#/components/schemas/ECommerceTracking"
          },
          "sharepoint_integration": {
            "$ref": "#/components/schemas/SharepointIntegration"
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt1"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        }
      },
      "AddMetaSite": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "ppms/meta-site"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/AddMetaSiteAttributes"
          }
        }
      },
      "AddMetaSiteAttributes": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/MetaSiteName"
          },
          "currency": {
            "$ref": "#/components/schemas/DefaultCurrency"
          },
          "timezone": {
            "$ref": "#/components/schemas/DefaultTimezone"
          },
          "e_commerce_tracking": {
            "$ref": "#/components/schemas/DefaultECommerceTracking"
          },
          "sharepoint_integration": {
            "$ref": "#/components/schemas/DefaultSharepointIntegration"
          }
        }
      },
      "EditableMetaSite": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "ppms/meta-site"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/EditableMetaSiteAttributes"
          }
        }
      },
      "EditableMetaSiteAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/MetaSiteName"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "e_commerce_tracking": {
            "$ref": "#/components/schemas/ECommerceTracking"
          },
          "sharepoint_integration": {
            "$ref": "#/components/schemas/SharepointIntegration"
          }
        }
      },
      "AppIdentifiersList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppIdentifier"
            }
          }
        }
      },
      "AppIdentifier": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "description": "Resource type",
            "type": "string",
            "enum": [
              "ppms/app"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "MetaSiteName": {
        "type": "string",
        "description": "Unique name of a meta site",
        "example": "All apps",
        "maxLength": 191,
        "minLength": 1
      },
      "Currency": {
        "type": "string",
        "description": "Currency in ISO 4217 format (e.g. USD)",
        "example": "USD"
      },
      "DefaultCurrency": {
        "type": "string",
        "description": "Currency in ISO 4217 format (e.g. USD)",
        "example": "USD",
        "default": "USD"
      },
      "Timezone": {
        "type": "string",
        "description": "Timezone in IANA time zone format (like Europe/Warsaw), or UTC offset (like UTC+1)",
        "example": "Europe/Warsaw"
      },
      "DefaultTimezone": {
        "type": "string",
        "description": "Timezone in IANA time zone format (like Europe/Warsaw), or UTC offset (like UTC+1)",
        "example": "Europe/Warsaw",
        "default": "UTC"
      },
      "ECommerceTracking": {
        "type": "boolean",
        "description": "Enables e-commerce reports, additional tab is shown in Analytics module with e-commerce logs. Sales can be easily tracked using this setting.",
        "example": false
      },
      "DefaultECommerceTracking": {
        "type": "boolean",
        "description": "Enables e-commerce reports, additional tab is shown in Analytics module with e-commerce logs. Sales can be easily tracked using this setting.",
        "example": false,
        "default": false
      },
      "SharepointIntegration": {
        "type": "boolean",
        "description": "Enable sharepoint integration",
        "example": false
      },
      "DefaultSharepointIntegration": {
        "type": "boolean",
        "description": "Enable sharepoint integration",
        "example": false,
        "default": false
      },
      "CreatedAt1": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp of object's creation",
        "readOnly": true
      },
      "UpdatedAt": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp of object's last modification",
        "readOnly": true
      },
      "AppName": {
        "type": "string",
        "description": "App name",
        "example": "Example app"
      },
      "Name": {
        "type": "string",
        "description": "App or Meta Site name",
        "example": "Example app"
      },
      "Organization": {
        "type": "string",
        "description": "Organization to which a resource belongs to",
        "example": "default",
        "deprecated": true
      },
      "App": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "description": "Resource type",
            "type": "string",
            "enum": [
              "ppms/app"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "attributes": {
            "type": "object",
            "required": [
              "name",
              "timezone",
              "currency"
            ],
            "properties": {
              "name": {
                "$ref": "#/components/schemas/AppName"
              },
              "timezone": {
                "$ref": "#/components/schemas/Timezone"
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          }
        }
      },
      "ModuleId": {
        "type": "string",
        "enum": [
          "analytics",
          "piwik",
          "consent_manager",
          "tag_manager",
          "administration",
          "audience_manager"
        ],
        "description": "ID of a module"
      },
      "UserIdentifier": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Resource type",
            "type": "string",
            "enum": [
              "ppms/user"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "ModulesAccessForUser": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ModuleId"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "module/access/user"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "group_access",
              "access"
            ],
            "properties": {
              "group_access": {
                "type": "object",
                "required": [
                  "group_names",
                  "access"
                ],
                "properties": {
                  "group_names": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Managers"
                    }
                  },
                  "access": {
                    "type": "boolean"
                  }
                }
              },
              "access": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "ErrorObject2": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "code",
                "detail",
                "source"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "the HTTP status code applicable to this problem, expressed as a string value",
                  "example": "400"
                },
                "code": {
                  "type": "string",
                  "description": "an application-specific error code, expressed as a string value",
                  "example": "error.default"
                },
                "detail": {
                  "type": "string",
                  "description": "a human-readable explanation specific to this occurrence of the problem. Like `title`, this field’s value can be localized\n",
                  "example": "This field is invalid"
                },
                "source": {
                  "type": "object",
                  "description": "an object containing references to the source of the error, optionally including any of the following members: [pointer, parameter]\n",
                  "properties": {
                    "pointer": {
                      "type": "string",
                      "example": "/data",
                      "description": "a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/name\" for a specific attribute]\n"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TrackerAppSettings": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "tracker/settings/app"
                ]
              },
              "id": {
                "$ref": "#/components/schemas/Id"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "anonymize_visitor_geolocation_level": {
                    "$ref": "#/components/schemas/AnonymizeVisitorGeolocationLevel"
                  },
                  "anonymize_visitor_ip_level": {
                    "$ref": "#/components/schemas/AnonymizeVisitorIpLevel"
                  },
                  "campaign_content_params": {
                    "$ref": "#/components/schemas/CampaignContentParams"
                  },
                  "campaign_id_params": {
                    "$ref": "#/components/schemas/CampaignIdParams"
                  },
                  "campaign_keyword_params": {
                    "$ref": "#/components/schemas/CampaignKeywordParams"
                  },
                  "campaign_medium_params": {
                    "$ref": "#/components/schemas/CampaignMediumParams"
                  },
                  "campaign_name_params": {
                    "$ref": "#/components/schemas/CampaignNameParams"
                  },
                  "campaign_source_params": {
                    "$ref": "#/components/schemas/CampaignSourceParams"
                  },
                  "create_new_visit_when_campaign_changes": {
                    "$ref": "#/components/schemas/CreateNewVisitWhenCampaignChanges"
                  },
                  "create_new_visit_when_website_referrer_changes": {
                    "$ref": "#/components/schemas/CreateNewVisitWhenWebsiteReferrerChanges"
                  },
                  "enable_fingerprinting_across_websites": {
                    "$ref": "#/components/schemas/EnableFingerprintingAcrossWebsites"
                  },
                  "exclude_crawlers": {
                    "$ref": "#/components/schemas/ExcludeCrawlers"
                  },
                  "exclude_unknown_urls": {
                    "$ref": "#/components/schemas/ExcludeUnknownUrls"
                  },
                  "excluded_ips": {
                    "$ref": "#/components/schemas/ExcludedIps"
                  },
                  "excluded_user_agents": {
                    "$ref": "#/components/schemas/ExcludedUserAgents"
                  },
                  "fingerprint_based_on_anonymized_ip": {
                    "$ref": "#/components/schemas/FingerprintBasedOnAnonymizedIp"
                  },
                  "keep_url_fragment": {
                    "$ref": "#/components/schemas/KeepUrlFragment"
                  },
                  "site_search_category_params": {
                    "$ref": "#/components/schemas/SiteSearchCategoryParams"
                  },
                  "site_search_query_params": {
                    "$ref": "#/components/schemas/SiteSearchQueryParams"
                  },
                  "strip_site_search_query_parameters": {
                    "$ref": "#/components/schemas/StripSiteSearchQueryParameters"
                  },
                  "tracking_fingerprint_disabled": {
                    "$ref": "#/components/schemas/TrackingFingerprintDisabled"
                  },
                  "trust_visitors_cookies": {
                    "$ref": "#/components/schemas/TrustVisitorsCookies"
                  },
                  "url_query_parameter_to_exclude_from_url": {
                    "$ref": "#/components/schemas/UrlQueryParameterToExcludeFromUrl"
                  },
                  "urls": {
                    "$ref": "#/components/schemas/Urls"
                  },
                  "updated_at": {
                    "$ref": "#/components/schemas/UpdatedAt"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalTrackerSettings": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "tracker/settings/app/global"
                ]
              },
              "id": {
                "type": "string",
                "enum": [
                  "global"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "anonymize_visitor_geolocation_level": {
                    "$ref": "#/components/schemas/AnonymizeVisitorGeolocationLevel"
                  },
                  "anonymize_visitor_ip_level": {
                    "$ref": "#/components/schemas/AnonymizeVisitorIpLevel"
                  },
                  "campaign_content_params": {
                    "$ref": "#/components/schemas/CampaignContentParams"
                  },
                  "campaign_id_params": {
                    "$ref": "#/components/schemas/CampaignIdParams"
                  },
                  "campaign_keyword_params": {
                    "$ref": "#/components/schemas/CampaignKeywordParams"
                  },
                  "campaign_medium_params": {
                    "$ref": "#/components/schemas/CampaignMediumParams"
                  },
                  "campaign_name_params": {
                    "$ref": "#/components/schemas/CampaignNameParams"
                  },
                  "campaign_source_params": {
                    "$ref": "#/components/schemas/CampaignSourceParams"
                  },
                  "create_new_visit_when_campaign_changes": {
                    "$ref": "#/components/schemas/CreateNewVisitWhenCampaignChanges"
                  },
                  "create_new_visit_when_website_referrer_changes": {
                    "$ref": "#/components/schemas/CreateNewVisitWhenWebsiteReferrerChanges"
                  },
                  "enable_fingerprinting_across_websites": {
                    "$ref": "#/components/schemas/EnableFingerprintingAcrossWebsites"
                  },
                  "exclude_crawlers": {
                    "$ref": "#/components/schemas/ExcludeCrawlers"
                  },
                  "exclude_unknown_urls": {
                    "$ref": "#/components/schemas/ExcludeUnknownUrls"
                  },
                  "excluded_ips": {
                    "$ref": "#/components/schemas/ExcludedIps"
                  },
                  "excluded_user_agents": {
                    "$ref": "#/components/schemas/ExcludedUserAgents"
                  },
                  "fingerprint_based_on_anonymized_ip": {
                    "$ref": "#/components/schemas/FingerprintBasedOnAnonymizedIp"
                  },
                  "keep_url_fragment": {
                    "$ref": "#/components/schemas/KeepUrlFragment"
                  },
                  "site_search_category_params": {
                    "$ref": "#/components/schemas/SiteSearchCategoryParams"
                  },
                  "site_search_query_params": {
                    "$ref": "#/components/schemas/SiteSearchQueryParams"
                  },
                  "strip_site_search_query_parameters": {
                    "$ref": "#/components/schemas/StripSiteSearchQueryParameters"
                  },
                  "tracking_fingerprint_disabled": {
                    "$ref": "#/components/schemas/TrackingFingerprintDisabled"
                  },
                  "trust_visitors_cookies": {
                    "$ref": "#/components/schemas/TrustVisitorsCookies"
                  },
                  "url_query_parameter_to_exclude_from_url": {
                    "$ref": "#/components/schemas/UrlQueryParameterToExcludeFromUrl"
                  },
                  "updated_at": {
                    "$ref": "#/components/schemas/UpdatedAt"
                  }
                }
              }
            }
          }
        }
      },
      "Urls": {
        "type": "array",
        "description": "List of app valid urls.  Used mostly to detect referrers and to exclude traffic if `exclude_unknown_urls` is enabled.\n```\nThis value is created when a new website is added.\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "http://example.com/",
          "http://example.com/app"
        ]
      },
      "ExcludeUnknownUrls": {
        "type": "boolean",
        "description": "When enabled, tracker discards all requests originating from urls absent in `urls` collection\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "ExcludedIps": {
        "type": "array",
        "description": "List of IPs to blacklist from tracking. You can use wildcards, e.g. ``1.2.3.*`` or ``1.2.*.*``\n```\nInitial global value:\n  []\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "192.168.0.0",
          "172.16.0.0",
          "1.2.*.*"
        ]
      },
      "UrlQueryParameterToExcludeFromUrl": {
        "type": "array",
        "description": "URL query parameters excluded from tracking, like: ``gclid``, ``fb_xd_fragment``, ``fb_comment_id``. Regular expressions such as ``/^sess.*|.*[dD]ate$/`` are supported.\n```\nInitial global value:\n  [\n    gclid,\n    fbclid,\n    fb_xd_fragment,\n    fb_comment_id,\n    phpsessid,\n    jsessionid,\n    sessionid,\n    aspsessionid,\n    doing_wp_cron,\n    sid,\n    pk_vid\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pl_medium",
          "pk_source",
          "fb_comment_id",
          "/^sess.*|.*[dD]ate$/"
        ]
      },
      "ExcludedUserAgents": {
        "type": "array",
        "description": "If the visitor's user agent string contains any of the strings you specify, the visitor will be excluded from tracking.\n```\nInitial global value:\n  []\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0",
          "Opera/9.80 (Windows NT 6.2; Win64; x64) Presto/2.12 Version/12.16"
        ]
      },
      "FingerprintBasedOnAnonymizedIp": {
        "type": "boolean",
        "description": "When enabled, visitor geolocation calculation is based on anonymized IP instead of real one.\n```\nInitial global value:\n  false\n```\n",
        "example": true
      },
      "KeepUrlFragment": {
        "type": "boolean",
        "description": "When disabled, everything after #, e.g. ``example.org/index.html#first_section`` will be tracked as ``example.org.index.html``\n```\nInitial global value:\n  true\n```\n",
        "example": true
      },
      "SiteSearchQueryParams": {
        "type": "array",
        "description": "URL query parameters that are used for site search in an app. If you want to have this parameters removed from URLs in reports enable ``strip_site_search_query_parameters`` setting.\n```\nInitial global value:\n  [\n    q,\n    query,\n    s,\n    search,\n    searchword,\n    keyword\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "s",
          "search"
        ]
      },
      "SiteSearchCategoryParams": {
        "type": "array",
        "description": "URL query parameters that are used for site search category in an app. If you want to have this parameters removed from URLs in reports enable ``strip_site_search_query_parameters`` setting.\n```\nInitial global value:\n  []\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "category",
          "cat",
          "c"
        ]
      },
      "AnonymizeVisitorIpLevel": {
        "type": "integer",
        "description": "Anonymize \"n\" octets of Visitors IP addresses. All events and sessions that are processed will have ther IP transformed. For example, when you anonymize 2 last octetsm incoming IP 10.76.143.250 will be trasformed to 10.76.0.0. Such transformed IP will be used to aggregate data.\n```\nInitial global value:\n  0\n```\n",
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "example": 1
      },
      "AnonymizeVisitorGeolocationLevel": {
        "type": "string",
        "description": "When enabled, some geolocation data will be removed from the events an session. For example, if you set to remove data at country level, the geolocation match will be as accurate as possible, but City and Region data will be removed in the process. Country and Continent data will be accurate. This transformed data will be used in aggregation.\n```\nInitial global value:\n  none\n```\n",
        "enum": [
          "none",
          "City",
          "Region",
          "Country",
          "Continent"
        ],
        "example": "Region"
      },
      "CreateNewVisitWhenWebsiteReferrerChanges": {
        "type": "boolean",
        "description": "When enabled, a new session is created each time when refferrer type or name changes during the session, even if the `visit_standard_length` did not expire.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "CreateNewVisitWhenCampaignChanges": {
        "type": "boolean",
        "description": "When enabled, a new session is created each time when campaign type or name changes during the session, even if the `visit_standard_length` did not expire.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "TrustVisitorsCookies": {
        "type": "boolean",
        "description": "When enabled, session events wont be matched by a device fingerprint. Only vistor side generated `_id` paramater will be taken into account.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "CampaignNameParams": {
        "type": "array",
        "description": "URL query parameters that could contain name of the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_name`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_campaign,\n    piwik_campaign,\n    pk_cpn,\n    utm_campaign\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_campaign"
        ]
      },
      "CampaignKeywordParams": {
        "type": "array",
        "description": "URL query parameters that could contain keywords for the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_keyword`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_medium,\n    utm_medium\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_medium"
        ]
      },
      "CampaignSourceParams": {
        "type": "array",
        "description": "URL query parameters that could contain sources for the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_source`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_source,\n    utm_source\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_source"
        ]
      },
      "CampaignMediumParams": {
        "type": "array",
        "description": "URL query parameters that could contain mediums for the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_medium`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_medium,\n    utm_medium\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_medium"
        ]
      },
      "CampaignContentParams": {
        "type": "array",
        "description": "URL query parameters that could contain content of the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_content`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_content,\n    utm_content\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_content"
        ]
      },
      "CampaignIdParams": {
        "type": "array",
        "description": "URL query parameters that could contain an ID of the campaign. Processor will search for the paramters listed in this setting and it will set dimension ``campaign_id`` to the first parameter that matches name.\n```\nInitial global value:\n  [\n    pk_cid,\n    utm_id\n  ]\n```\n",
        "items": {
          "type": "string"
        },
        "example": [
          "pk_cid"
        ]
      },
      "EnableFingerprintingAcrossWebsites": {
        "type": "boolean",
        "description": "When this option is enabled tracker will try to generate unified visitor_id even when user visits different websites.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "TrackingFingerprintDisabled": {
        "type": "boolean",
        "description": "Enabling this, will make tracker to use fingerprint from cookie. If you want to use this setting make sure to enable `trust_visitors_cookies`.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "StripSiteSearchQueryParameters": {
        "type": "boolean",
        "description": "When enabled, all of parameters set in `site_search_query_params` and `site_search_category_params` will be removed from report URLs.\n```\nInitial global value:\n  false\n```\n",
        "example": false
      },
      "ExcludeCrawlers": {
        "type": "boolean",
        "description": "When disabled, crawler bots will be tracked like the regular visitors.\n```\nInitial global value:\n  true\n```\n",
        "example": true
      },
      "FormErrorObject": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorObject3"
          },
          {
            "required": [
              "status",
              "title",
              "code",
              "source",
              "detail"
            ],
            "properties": {
              "detail": {
                "type": "string",
                "description": "a human-readable explanation specific to this occurrence of the problem. Like `title`, this field’s value can be localized\n",
                "example": "This field is invalid"
              },
              "source": {
                "type": "object",
                "description": "an object containing references to the source of the error, optionally including any of the following members: [pointer, parameter]\n",
                "properties": {
                  "pointer": {
                    "type": "string",
                    "example": "/data/attributes/name",
                    "description": "a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. '/data' for a primary data object, or '/data/attributes/name' for a specific attribute]\n"
                  },
                  "parameter": {
                    "type": "string",
                    "example": "offset",
                    "description": "a string indicating which URI query parameter caused the error"
                  }
                }
              }
            }
          }
        ]
      },
      "ErrorObject3": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "code",
                "title"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "the HTTP status code applicable to this problem, expressed as a string value",
                  "example": "400"
                },
                "code": {
                  "type": "string",
                  "description": "an application-specific error code, expressed as a string value",
                  "example": "error.default"
                },
                "title": {
                  "type": "string",
                  "description": "a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization\n"
                }
              }
            }
          }
        }
      },
      "PermissionGroup": {
        "type": "string",
        "description": "Permission group (for example `edit-publish` contains permissions `view`, `edit` and `publish`)",
        "enum": [
          "no-access",
          "view",
          "edit",
          "edit-publish",
          "manage"
        ]
      },
      "CreatedAt2": {
        "type": "string",
        "format": "date-time",
        "description": "Timestamp of object's creation",
        "readOnly": true
      },
      "UserGroup": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ppms/user-group"
            ]
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "readOnly": true
              }
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "name",
              "created_at",
              "updated_at"
            ],
            "properties": {
              "name": {
                "description": "User group name",
                "type": "string",
                "example": "Managers"
              },
              "created_at": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreatedAt2"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "updated_at": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatedAt"
                  },
                  {
                    "readOnly": true
                  }
                ]
              }
            }
          }
        }
      },
      "UsersList": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User details",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Resource type",
            "enum": [
              "ppms/user"
            ]
          },
          "attributes": {
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "$ref": "#/components/schemas/Email"
              }
            }
          }
        }
      },
      "UserIdentifiersList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIdentifier"
            }
          }
        }
      },
      "SetPermissionGroup": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "description": "Resource type",
                "type": "string",
                "enum": [
                  "ppms/permissions/group"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "entity_id",
                  "group"
                ],
                "properties": {
                  "entity_id": {
                    "$ref": "#/components/schemas/Id"
                  },
                  "group": {
                    "$ref": "#/components/schemas/PermissionGroup"
                  }
                }
              }
            }
          }
        }
      },
      "User_Role": {
        "type": "string",
        "description": "User role",
        "example": "USER",
        "enum": [
          "OWNER",
          "USER"
        ]
      },
      "User_Email": {
        "type": "string",
        "description": "Valid user email",
        "format": "email",
        "example": "john@doe.com"
      },
      "User_Organization": {
        "type": "string",
        "example": "organization_name"
      },
      "User_Password": {
        "type": "string",
        "description": "Valid password (length between 8 and 128 chars, it must contain at least one digit, one uppercase and one lowercase letter)",
        "example": "Secret1337"
      },
      "Date": {
        "type": "string",
        "format": "date-time",
        "description": "Datetime with time zone in ISO-8601 format",
        "example": "2018-06-25T07:28:52+01:00"
      },
      "Language": {
        "type": "string",
        "format": "IETF-language-tag",
        "description": "User Interface language with IETF language tag format",
        "example": "en-US",
        "default": "en-US"
      },
      "JsonApi_Type1": {
        "type": "string",
        "description": "Resource type, unique across whole PPAS",
        "example": "ppms/user"
      },
      "JsonApi_User_Type": {
        "type": "string",
        "enum": [
          "ppms/user"
        ],
        "description": "PPAS user resource type"
      },
      "JsonApi_Resource_Object1": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JsonApi_Id"
          },
          "type": {
            "$ref": "#/components/schemas/JsonApi_Type1"
          },
          "attributes": {
            "type": "object"
          }
        }
      },
      "JsonApi_User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApi_Resource_Object1"
          },
          {
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/JsonApi_User_Type"
                  }
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "role": {
                    "$ref": "#/components/schemas/User_Role"
                  },
                  "organization": {
                    "$ref": "#/components/schemas/User_Organization"
                  },
                  "addedAt": {
                    "$ref": "#/components/schemas/Date"
                  },
                  "language": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            }
          }
        ]
      },
      "JsonApi_User_Object": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApi_User"
          }
        }
      },
      "JsonApi_User_Create": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ppms/user"
                ],
                "description": "Resource type, unique across whole PPAS"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/User_Password"
                  },
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "role": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User_Role"
                      }
                    ],
                    "default": "USER"
                  },
                  "language": {
                    "$ref": "#/components/schemas/Language"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      },
      "JsonApi_User_Invite": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ppms/user"
                ],
                "description": "Resource type, unique across whole PPAS"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "language": {
                    "$ref": "#/components/schemas/Language"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        }
      },
      "JsonApi_Edit_User": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApi_Resource_Object1"
              },
              {
                "properties": {
                  "type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonApi_User_Type"
                      }
                    ]
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "$ref": "#/components/schemas/User_Role"
                      },
                      "language": {
                        "$ref": "#/components/schemas/Language"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "JsonApi_Change_Role": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApi_Resource_Object1"
              },
              {
                "properties": {
                  "type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonApi_User_Type"
                      }
                    ]
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "$ref": "#/components/schemas/User_Role"
                      }
                    },
                    "required": [
                      "role"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "JsonApi_Change_Password": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonApi_Resource_Object1"
              },
              {
                "properties": {
                  "type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonApi_User_Type"
                      }
                    ]
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "currentPassword": {
                        "allOf": [
                          {
                            "description": "Current password of given user"
                          },
                          {
                            "$ref": "#/components/schemas/User_Password"
                          }
                        ]
                      },
                      "newPassword": {
                        "$ref": "#/components/schemas/User_Password"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "Bad_Request": {
        "description": "Bad Request"
      },
      "Forbidden": {
        "description": "Forbidden"
      },
      "Not_Found": {
        "description": "Not Found"
      },
      "No_Content": {
        "description": "No content"
      }
    },
    "responses": {
      "SetMetaSitePermissionBadRequest": {
        "description": "Bad Request",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BadRequestObject"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "400",
                        "code": "error.default",
                        "title": "Invalid form",
                        "detail": "Invalid permission \"copy\", available are: [no-access, view, edit, manage]",
                        "source": {
                          "pointer": "/data/attributes/permission"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "SetAppPermissionBadRequest": {
        "description": "Bad Request",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BadRequestObject"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "400",
                        "code": "error.default",
                        "title": "Invalid form",
                        "detail": "Invalid permission \"copy\", available are: [no-access, view, edit, edit-publish, manage]",
                        "source": {
                          "pointer": "/data/attributes/permission"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "*/*": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "example": "access token not authorized"
                }
              }
            }
          }
        }
      },
      "ListBadRequest": {
        "description": "Bad Request",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/QueryParamErrorObject"
            }
          }
        }
      },
      "UnauthorizedError1": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "example": "authorization field missing"
                }
              }
            }
          }
        }
      },
      "AccessDeniedError": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject1"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "detail": "Authentication credentials were not provided.",
                        "status": "403",
                        "code": "not_authenticated"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "NoJWTError": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject1"
            }
          }
        }
      },
      "ListBadRequest1": {
        "description": "Bad Request",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BadRequestObject"
                },
                {
                  "example": {
                    "status": "400",
                    "code": "error.default",
                    "title": "Invalid query parameter 'offset' - value should be a positive integer - got '-1'"
                  }
                }
              ]
            }
          }
        }
      },
      "InvalidUuidBadRequest": {
        "description": "Bad Request",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BadRequestObject"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "400",
                        "code": "error.default",
                        "title": "\"my-id\" is not valid UUID."
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "403",
                        "code": "error.forbidden",
                        "title": "Access denied."
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "NotFoundMetaSite": {
        "description": "Not Found",
        "content": {
          "*/*": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "404",
                        "code": "meta-site.error.not-exists",
                        "title": "Meta site with id \"2136b49b-c4b5-44f1-a9ab-b6149bf047a0\" does not exist"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "NotFoundModule": {
        "description": "Not Found",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "404",
                        "code": "module.not-exists",
                        "title": "Module 'personalization' does not exist. Available modules are [analytics, piwik, consent_manager, tag_manager, administration, audience_manager]"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "NotFoundUser": {
        "description": "Not Found",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "404",
                        "code": "modules.error.user-not-exists",
                        "detail": "User 704a6202-d899-4968-aba3-71758457bec1 does not exist"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "UnauthorizedError2": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "example": "access token not authorized"
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject2"
                  }
                }
              },
              "example": {
                "errors": [
                  {
                    "status": "400",
                    "code": "modules.error.too-many-users",
                    "detail": "This collection contains 101 elements. It should have 100 elements or less.",
                    "source": {
                      "pointer": "/data"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "ConflictUserError": {
        "description": "Conflict",
        "content": {
          "application/vnd.api.json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "409",
                        "code": "error",
                        "source": {
                          "pointer": "/data"
                        },
                        "detail": "The resource object's type (INVALID) is not the type that constitute the collection represented by the endpoint (ppms/user)."
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "ConflictModulesAccessError": {
        "description": "Conflict",
        "content": {
          "application/vnd.api.json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "409",
                        "code": "error",
                        "source": {
                          "pointer": "/data"
                        },
                        "detail": "The resource object's type (INVALID) is not the type that constitute the collection represented by the endpoint (module/access)."
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "AccessToModuleDeniedError": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "403",
                        "code": "modules.error.access-denied",
                        "detail": "Access to module 'analytics' is revoked"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "SetAccessForUnlicensedModuleError": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "403",
                        "code": "modules.error.unlicensed-module",
                        "detail": "Missing license for: analytics"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "NoJWTError1": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "403",
                        "code": "authentication_failed",
                        "detail": "Missing or invalid Authorization header"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "UnsupportedMediaTypeError": {
        "description": "Unsupported Media Type",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorObject2"
                },
                {
                  "example": {
                    "errors": [
                      {
                        "status": "415",
                        "code": "unsupported_media_type",
                        "source": {
                          "pointer": "/data"
                        },
                        "detail": "Unsupported media type \"UNSUPPORTED\" in request."
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "InvalidUuidBadRequest1": {
        "description": "Bad Request",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject3"
                  }
                }
              },
              "example": {
                "errors": [
                  {
                    "status": "400",
                    "code": "error.default",
                    "title": "\"invalid\" is not valid UUID."
                  }
                ]
              }
            }
          }
        }
      },
      "InvalidFormBadRequest": {
        "description": "Bad Request",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormErrorObject"
                  }
                }
              },
              "example": {
                "errors": [
                  {
                    "status": "400",
                    "code": "error.default",
                    "title": "Invalid form",
                    "detail": "Invalid anonymization level '13.5', available are: [0, 1, 2, 3, 4]",
                    "source": {
                      "pointer": "/data/attributes/anonymize_visitor_ip_level"
                    }
                  },
                  {
                    "status": "400",
                    "code": "error.not-blank",
                    "title": "Invalid form",
                    "detail": "This value should not be blank.",
                    "source": {
                      "pointer": "/data/type"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "UnauthorizedError3": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "example": "access token not authorized"
                }
              }
            }
          }
        }
      },
      "AccessDeniedError1": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "example": {
                "errors": [
                  {
                    "status": "403",
                    "code": "not_authenticated",
                    "title": "Authentication credentials were not provided."
                  }
                ]
              }
            }
          }
        }
      },
      "NoAppWithSuchUrl": {
        "description": "Not Found",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "example": {
                "errors": [
                  {
                    "status": "404",
                    "code": "error.resource-not-found",
                    "title": "App with given url 'http://example.com' doesn't exist"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "parameters": {
      "UserGroupsSearch": {
        "in": "query",
        "name": "search",
        "description": "Search phrase - search for user group name and user group id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "EntityId": {
        "in": "path",
        "name": "entity_id",
        "required": true,
        "description": "UUIDv4 identifier of given entity",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "Limit": {
        "in": "query",
        "name": "limit",
        "description": "Limits the number of returned items",
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "maximum": 1000
        },
        "required": false
      },
      "LimitListAppPermissions": {
        "in": "query",
        "name": "limit",
        "description": "Limits the number of returned items",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10
        }
      },
      "Offset": {
        "in": "query",
        "name": "offset",
        "description": "Sets offset for list of items",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false
      },
      "UserGroupSort": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "-name"
          ],
          "default": "name"
        }
      },
      "UserGroupSearch": {
        "in": "query",
        "name": "search",
        "description": "Search phrase - search for name or id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "UserSearch": {
        "in": "query",
        "name": "search",
        "description": "Search phrase - search for e-mail or id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "AppId": {
        "in": "path",
        "name": "app_id",
        "required": true,
        "description": "UUIDv4 identifier of an object",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "UserId": {
        "in": "path",
        "name": "user_id",
        "required": true,
        "description": "UUIDv4 identifier of an object",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "UserGroupId": {
        "in": "path",
        "name": "user_group_id",
        "required": true,
        "description": "UUIDv4 identifier of an object",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MetaSiteId": {
        "in": "path",
        "name": "meta_site_id",
        "required": true,
        "description": "UUIDv4 identifier of an object",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "permissions_limit": {
        "name": "limit",
        "in": "query",
        "description": "Limit for app permissions",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10000
        }
      },
      "search": {
        "name": "search",
        "in": "query",
        "description": "App search query",
        "required": false,
        "schema": {
          "type": "string",
          "default": ""
        }
      },
      "search_query": {
        "name": "search_query",
        "in": "query",
        "description": "(deprecated) Use `search` param instead",
        "schema": {
          "type": "string",
          "default": ""
        },
        "required": false
      },
      "sort": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "default": "-addedAt",
          "enum": [
            "name",
            "addedAt",
            "updatedAt",
            "-name",
            "-addedAt",
            "-updatedAt"
          ]
        }
      },
      "app_id": {
        "name": "app_id",
        "in": "path",
        "description": "App UUIDv4",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "UserGroup_Id": {
        "in": "path",
        "name": "user_group_id",
        "description": "UUIDv4 identifier of given user group",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "UserGroup_AppPermissionsSearch": {
        "in": "query",
        "name": "search",
        "description": "Search phrase for searching apps by name or id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "UserGroup_AppPermissionsSort": {
        "in": "query",
        "name": "sort",
        "description": "Sort type, order of sorting can be reversed by adding dash before type e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "default": "name",
          "enum": [
            "name",
            "-name"
          ]
        }
      },
      "Limit1": {
        "name": "limit",
        "in": "query",
        "description": "Limit for pagination",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "maximum": 100
        }
      },
      "Offset1": {
        "name": "offset",
        "in": "query",
        "description": "Offset for pagination",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0
        }
      },
      "EmailFilter": {
        "in": "query",
        "name": "filter[email]",
        "required": false,
        "description": "Email address search query",
        "allowEmptyValue": true,
        "schema": {
          "type": "string",
          "example": [
            "piwik.pro"
          ]
        }
      },
      "EntriesFilter": {
        "in": "query",
        "name": "filter",
        "description": "Filter items by provided criteria",
        "style": "deepObject",
        "required": false,
        "schema": {
          "type": "object",
          "properties": {
            "type": {
              "description": "Comma separated list of event types",
              "example": "app.added,app.edited",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Type"
              }
            },
            "date_from": {
              "description": "Date from (ISO-8601 format)",
              "example": "2020-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "date_to": {
              "description": "Date to (ISO-8601 format)",
              "example": "2020-01-03T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "author_id": {
              "description": "Comma separated list of UUIDs of event authors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Id"
              }
            },
            "subject_id": {
              "description": "Comma separated list of UUIDs of event subjects (i.e. for `Meta site edited` it's the id of a meta site)",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Id"
              }
            },
            "ip": {
              "description": "Comma serparated list of IPs",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Ip"
              }
            }
          }
        }
      },
      "Sort": {
        "in": "query",
        "name": "sort",
        "description": "Sort by field",
        "schema": {
          "type": "string",
          "default": "-created_at",
          "enum": [
            "type",
            "email",
            "created_at",
            "ip",
            "subject_id",
            "-type",
            "-email",
            "-created_at",
            "-ip",
            "-subject_id"
          ]
        },
        "required": false
      },
      "Search": {
        "in": "query",
        "name": "search",
        "description": "Search phrase - search for name or id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Action": {
        "in": "query",
        "name": "action",
        "description": "Action to which I have access (can execute given action)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "view",
            "edit"
          ]
        }
      },
      "Sort1": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "created_at",
            "updated_at",
            "-name",
            "-created_at",
            "-updated_at"
          ],
          "default": "name"
        }
      },
      "SortAppsWithMetasites": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "type",
            "created_at",
            "-name",
            "-type",
            "-created_at"
          ],
          "default": "name"
        }
      },
      "Module": {
        "in": "path",
        "name": "module",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "analytics",
            "piwik",
            "consent_manager",
            "tag_manager",
            "administration",
            "audience_manager"
          ]
        }
      },
      "app_id1": {
        "name": "app_id",
        "in": "path",
        "description": "App UUIDv4",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "app_url": {
        "name": "app_url",
        "in": "query",
        "description": "App URL",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "setting": {
        "name": "setting",
        "in": "path",
        "description": "Tracker setting name",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "anonymize_visitor_geolocation_level",
            "anonymize_visitor_ip_level",
            "campaign_content_params",
            "campaign_id_params",
            "campaign_keyword_params",
            "campaign_medium_params",
            "campaign_name_params",
            "campaign_source_params",
            "create_new_visit_when_campaign_changes",
            "create_new_visit_when_website_referrer_changes",
            "enable_fingerprinting_across_websites",
            "exclude_crawlers",
            "exclude_unknown_urls",
            "excluded_ips",
            "excluded_user_agents",
            "fingerprint_based_on_anonymized_ip",
            "keep_url_fragment",
            "site_search_category_params",
            "site_search_query_params",
            "strip_site_search_query_parameters",
            "tracking_fingerprint_disabled",
            "trust_visitors_cookies",
            "url_query_parameter_to_exclude_from_url",
            "urls"
          ]
        }
      },
      "UserGroupId1": {
        "in": "path",
        "name": "user_group_id",
        "required": true,
        "description": "UUIDv4 identifier of given user group",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "UserGroupsSort": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-name)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "created_at",
            "updated_at",
            "-name",
            "-created_at",
            "-updated_at"
          ],
          "default": "name"
        }
      },
      "UserGroupsLimit": {
        "in": "query",
        "name": "limit",
        "description": "Limits the number of returned user groups in response",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 1000,
          "default": 10
        }
      },
      "UsersSearch": {
        "in": "query",
        "name": "search",
        "description": "Search phrase for searching users by email or user id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "UsersSort": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-email)",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "email",
            "-email"
          ],
          "default": "email"
        }
      },
      "Limit2": {
        "in": "query",
        "name": "limit",
        "description": "Limits the number of returned items",
        "required": false,
        "schema": {
          "type": "string",
          "default": 10
        }
      },
      "search1": {
        "name": "search",
        "in": "query",
        "description": "User search query",
        "required": false,
        "schema": {
          "type": "string",
          "default": ""
        }
      },
      "sort1": {
        "in": "query",
        "name": "sort",
        "description": "Sort field - can be reversed by adding dash before field name e.g (-email)",
        "schema": {
          "type": "string",
          "default": "-addedAt",
          "enum": [
            "email",
            "addedAt",
            "role",
            "-email",
            "-addedAt",
            "-role"
          ]
        },
        "required": false
      }
    },
    "securitySchemes": {
      "$ref": "common/api/common_security_schemes.json#/components/securitySchemes"
    }
  }
}
