openapi: 3.1.0
info:
  title: CDP Profiles API Documentation
  version: 0.0.0
  description: This is the documentation of the CDP Profiles API service.
servers:
  - url: https://organization.piwik.pro
paths:
  /api/cdp/profiles/public/v1/app/{app_id}/profile/{cookie_id}/audiences:
    get:
      summary: Fetch audiences the profile belongs to
      tags:
        - profiles
      security: []
      operationId: get-profile-audiences
      description: Get audiences the profile belongs to
      parameters:
        - $ref: "../components.yaml#/components/parameters/AppId"
        - in: path
          name: cookie_id
          description: Cookie ID stored in cookies
          schema:
            type: string
            example: "3a0133748b3e524c"
          required: true
      responses:
        200:
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ProfileAudienceIdList"
          description: An array of audience IDs profile belongs to
        400:
          $ref: "../components.yaml#/components/responses/BadRequestError"
        402:
          $ref: "../components.yaml#/components/responses/ModuleDisabledError"
        404:
          content:
            text/plain:
              schema:
                type: string
                example: 404 page not found
          description: Profile with given cookie_id or organization was not found
        500:
          $ref: "../components.yaml#/components/responses/InternalServerError"
  /api/cdp/profiles/public/v1/app/{app_id}/update-profile:
    post:
      summary: Create or update profile attributes
      security: []
      operationId: post-profile-attributes
      description: |
        A single request can be used to create or update multiple profile attributes.
        The data payload should consist of a key-value map where each attribute's name is denoted by a key, along with its corresponding value.
        It will exclusively impact the app associated with the provided `app_id` in the URL path.

        Provided data must have at least one identifier:

          - ``user_id``
          - ``cookie_id``
      parameters:
        - $ref: "../components.yaml#/components/parameters/AppId"
      requestBody:
        required: true
        description: User's custom attributes
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileCustomAttributesUpdateInput"
      responses:
        202:
          description: Request accepted and waiting for processing.
        400:
          $ref: "../components.yaml#/components/responses/BadRequestError"
        402:
          $ref: "../components.yaml#/components/responses/ModuleDisabledError"
        500:
          $ref: "../components.yaml#/components/responses/InternalServerError"
  /cdp/webhook/{app_id}/{import_webhook_id}:
    get:
      summary: Data webhook import GET request
      security: []
      operationId: get-import-webhook-request
      description: |
        Imports data into multiple attributes in an associated profile via webhook GET request.
      parameters:
        - $ref: "../components.yaml#/components/parameters/AppId"
        - in: path
          name: import_webhook_id
          description: An webhook import UUID to which the request is sent
          schema:
            type: string
            format: uuid
            example: e898ae47-61cd-4c9d-9d67-e5a930eb9f39
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataImportWebhook"
      responses:
        202:
          description: Request accepted and waiting for processing.
        400:
          $ref: "../components.yaml#/components/responses/BadRequestError"
        402:
          $ref: "../components.yaml#/components/responses/ModuleDisabledError"
        404:
          content:
            text/plain:
              schema:
                type: string
                example: 404 page not found
          description: Given application id was not found
        413:
          $ref: "../components.yaml#/components/responses/ContentTooLargeError"
        422:
          $ref: "../components.yaml#/components/responses/UnprocessableEntityError"
        429:
          $ref: "../components.yaml#/components/responses/TooManyRequestsError"
        500:
          $ref: "../components.yaml#/components/responses/InternalServerError"
    post:
      summary: Data webhook import POST request
      security: []
      operationId: post-import-webhook-request
      description: |
        Imports data into multiple attributes in an associated profile via webhook POST request.
      parameters:
        - $ref: "../components.yaml#/components/parameters/AppId"
        - in: path
          name: import_webhook_id
          description: An webhook import UUID to which the request is sent
          schema:
            type: string
            format: uuid
            example: e898ae47-61cd-4c9d-9d67-e5a930eb9f39
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataImportWebhook"
      responses:
        202:
          description: Request accepted and waiting for processing.
        400:
          $ref: "../components.yaml#/components/responses/BadRequestError"
        402:
          $ref: "../components.yaml#/components/responses/ModuleDisabledError"
        404:
          content:
            text/plain:
              schema:
                type: string
                example: 404 page not found
          description: Given application id was not found
        413:
          $ref: "../components.yaml#/components/responses/ContentTooLargeError"
        422:
          $ref: "../components.yaml#/components/responses/UnprocessableEntityError"
        429:
          $ref: "../components.yaml#/components/responses/TooManyRequestsError"
        500:
          $ref: "../components.yaml#/components/responses/InternalServerError"
    put:
      summary: Data webhook import PUT request
      security: []
      operationId: put-import-webhook-request
      description: |
        Imports data into multiple attributes in an associated profile via webhook PUT request.
      parameters:
        - $ref: "../components.yaml#/components/parameters/AppId"
        - in: path
          name: import_webhook_id
          description: An webhook import UUID to which the request is sent
          schema:
            type: string
            format: uuid
            example: e898ae47-61cd-4c9d-9d67-e5a930eb9f39
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataImportWebhook"
      responses:
        202:
          description: Request accepted and waiting for processing.
        400:
          $ref: "../components.yaml#/components/responses/BadRequestError"
        402:
          $ref: "../components.yaml#/components/responses/ModuleDisabledError"
        404:
          content:
            text/plain:
              schema:
                type: string
                example: 404 page not found
          description: Given application id was not found
        413:
          $ref: "../components.yaml#/components/responses/ContentTooLargeError"
        422:
          $ref: "../components.yaml#/components/responses/UnprocessableEntityError"
        429:
          $ref: "../components.yaml#/components/responses/TooManyRequestsError"
        500:
          $ref: "../components.yaml#/components/responses/InternalServerError"


components:
  schemas:
    ProfileAudienceIdList:
      type: array
      description: Array of audience IDs profile belongs to
      items:
        type: string
        format: uuid
        example: "2fb368ff-c0ca-45b9-bac5-421e40a34ff0"
    ProfileCustomAttributesUpdateInput:
      type: object
      description: Profile attributes object for creating and updating user custom attributes.
      required:
        - identifiers
        - attributes
      properties:
        identifiers:
          description: Identifiers associated with a user.
          anyOf:
            - $ref: "#/components/schemas/UserID"
            - $ref: "#/components/schemas/CookieID"
            - $ref: "#/components/schemas/ID"
          example:
            user_id: tom1987@bob.com
            cookie_id: "176a5215ff7b62e3"
        attributes:
          type: object
          description: Attributes of the occurred event.
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - type: string
                format: date-time
                description: A string that follows the ISO 8601 date-time notation, such as `2023-07-21T17:32:28Z`.
          example:
            occupation: teacher
            mood: happy
            contract_end: 2023-07-21T17:32:28Z
    UserID:
      type: object
      required:
        - user_id
      properties:
        user_id:
          description: User ID identifier
          type: string
          example: "tom1987@bob.com"
    CookieID:
      type: object
      required:
        - cookie_id
      properties:
        cookie_id:
          type: string
          description: Cookie ID identifier
          example: "176a5215ff7b62e3"
          format: hex
    ID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Profile ID identifier
          example: "836fa2fea2cf988b"
          format: hex
    DataImportWebhook:
      type: object
      additionalProperties:
        description: |
          Data that a profile will be enriched with. Properties in the provided object are mapped according to the webhook import configurations.

          Limits:
            * String values length limit - 1024 characters
            * Array elements limit - 1024 elements
            * Key names length limit - 256 characters
            * Webhook request size limit - 50kB
        oneOf:
          - type: string
          - type: number
          - type: boolean
          - type: string
            format: date-time
            description: A string that follows the ISO 8601 date-time notation, such as `2023-07-21T17:32:28Z`.
      example:
        occupation: electrician
        mood: sad
        contract_end: 2023-12-10T16:30:00Z
        name: { "first": "john", "last": "doe" }
